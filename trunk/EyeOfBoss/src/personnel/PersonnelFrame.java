/*
 * PersonnelFrame.java
 *
 * Created on 30 marzec 2008, 16:15
 */

package personnel;


import customComponents.Schedule;
import java.awt.event.ActionEvent;
import personnel.ColorEditor;
import database.DBConn;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionListener;
import java.lang.Object;
import java.lang.System;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.sql.*;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.table.TableCellRenderer;
import logIn.User;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author   Design: OLO, Implementation: ≈Åukasz Spintzyk
 */
public class PersonnelFrame extends javax.swing.JFrame {
    
    /** Creates new form PersonnelFrame */
    public PersonnelFrame() {
        usr.setId(-1);
        initComponents();
        initRatePanel();
        initSalaryPanel();
        initialization=false;
        //initWorkerLeavePanel(0);
        initLeaveTypesPanel();
        initDevicesPanel();
        //initWorkerDevicesPanel(0);
        //initWorkerSchedulePanel(0,0);
        initSchedulesPanel();
        actionWorker = new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                if (!e.getActionCommand().equals("WORKER_SET")) {
                    return;
                }
                PreparedStatement pstmt = null;
                try {
                    pstmt = DBConn.getConnection().prepareStatement("SELECT " + "imie, nazwisko, data_zatrudnienia, data_zwolnienia, miasto,adres, telefon, email, id_stawki, id_zmiany " + "FROM Pracownik WHERE id_pracownika = ?");

                    pstmt.setInt(1, e.getID());
                    ResultSet rs = pstmt.executeQuery();
                    if (rs.next()) {

                        
                        usr.setId(e.getID());

                        usr.setImie(rs.getString("imie"));
                        usr.setNazwisko(rs.getString("nazwisko"));
                        usr.setDataZatrudnienia(rs.getDate("data_zatrudnienia"));
                        usr.setDataZwolnienia(rs.getDate("data_zwolnienia"));
                        usr.setMiasto(rs.getString("miasto"));
                        usr.setAdres(rs.getString("adres"));
                        usr.setEmail(rs.getString("email"));
                        usr.setTelefon(rs.getInt("telefon"));
                        usr.setIdStawki(rs.getInt(9));
                        usr.setShiftId(rs.getInt(10));

                    }
                    rs.close();
                    pstmt.close();
                    
                    freeDevicesRadioButton.setSelected(true);
                    initWorkerDevicesPanel(e.getID());
                    
                    freeDevicesRadioButtonActionPerformed(null);
                    initWorkerSchedulePanel(usr.getId(),usr.getShiftId());
                    
                    initWorkerLeavePanel(e.getID());
                    updateSalaryWindow();
                    rateComboBoxActionPerformed(null);
                    
                    shiftSchedule1.clearSchedule();
                    shiftSchedule1.setWorkerId(e.getID());
                    List<Integer> l=new ArrayList<Integer>(1);
                    l.add(usr.getShiftId());
                    shiftSchedule1.setShiftID(l);
                    
                    shiftSchedule1.repaintSchedule();
                    
                } catch (SQLException ex) {
                    Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        searchWorker1.addActionListener(actionWorker);
    }
    private ActionListener actionWorker=null;
    private boolean initialization=true;
    private String oldRateName="";
        
    private User usr=new User();
    
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        workerDevicesbuttonGroup = new javax.swing.ButtonGroup();
        personellTabbedPane = new javax.swing.JTabbedPane();
        workerPanel = new javax.swing.JPanel();
        subWorkerPanel = new javax.swing.JTabbedPane();
        workerSchedulePanel = new javax.swing.JPanel();
        shiftSchedule1 = new customComponents.ShiftSchedule();
        jLabel29 = new javax.swing.JLabel();
        setNextShiftButton = new javax.swing.JButton();
        availableShiftsComboBox = new javax.swing.JComboBox();
        freeTimeWorkerPanel = new javax.swing.JPanel();
        leaveLabel = new javax.swing.JLabel();
        leaveYearLabel = new javax.swing.JLabel();
        leaveYearComboBox = new javax.swing.JComboBox();
        jScrollPane11 = new javax.swing.JScrollPane();
        leaveTable = new javax.swing.JTable();
        workerDevicePanel = new javax.swing.JPanel();
        deviceAllocationLabel = new javax.swing.JLabel();
        freeDevicesRadioButton = new javax.swing.JRadioButton();
        ownedDevicesRadioButton = new javax.swing.JRadioButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        deviceAllocationTable = new javax.swing.JTable();
        allocDevicesTableRadioButton = new javax.swing.JRadioButton();
        showDevicesLabel = new javax.swing.JLabel();
        workerSalaryPanel = new javax.swing.JPanel();
        formonthLabel = new javax.swing.JLabel();
        monthComboBox = new javax.swing.JComboBox();
        yearLabel = new javax.swing.JLabel();
        yearComboBox = new javax.swing.JComboBox();
        rateLabel = new javax.swing.JLabel();
        salaryDayLabel = new javax.swing.JLabel();
        salaryOvertimeLabel = new javax.swing.JLabel();
        salaryOvertimeTextField = new javax.swing.JTextField();
        salaryDayTextField = new javax.swing.JTextField();
        salaryWeekendsLabel = new javax.swing.JLabel();
        salarylatesLabel = new javax.swing.JLabel();
        salaryLatesTextField = new javax.swing.JTextField();
        salaryWeekendTextField = new javax.swing.JTextField();
        changeRateLabel = new javax.swing.JLabel();
        rateComboBox = new javax.swing.JComboBox();
        applyRateButton = new javax.swing.JButton();
        overtimeCountLabel = new javax.swing.JLabel();
        overtimeCountTextField = new javax.swing.JTextField();
        latesCountTextField = new javax.swing.JTextField();
        lateCountLabel = new javax.swing.JLabel();
        hoursCountLabel = new javax.swing.JLabel();
        hoursCountTextField = new javax.swing.JTextField();
        weekendsCountTextField = new javax.swing.JTextField();
        weekendsCountLabel = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        bonusTextField = new javax.swing.JTextField();
        sumTextField = new javax.swing.JTextField();
        sumLabel = new javax.swing.JLabel();
        forWhatLabel = new javax.swing.JLabel();
        forWhatTextField = new javax.swing.JTextField();
        applySalaryButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        leaveTimeTextField = new javax.swing.JTextField();
        isPayedLabel = new javax.swing.JLabel();
        wasRateLabel = new javax.swing.JLabel();
        wasRateValueLabel = new javax.swing.JLabel();
        searchWorker1 = new customComponents.searchWorker();
        schedulePanel = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        allShiftsSchedule = new customComponents.ShiftSchedule();
        editShiftSchedule = new customComponents.ShiftSchedule();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        shiftIdList = new javax.swing.JTable();
        coppyShiftButton = new javax.swing.JButton();
        deleteShiftButton = new javax.swing.JButton();
        editMonthComboBox = new javax.swing.JComboBox();
        editYearComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        editShiftComboBox = new javax.swing.JComboBox();
        editShiftLabel = new javax.swing.JLabel();
        staticticsPanel = new javax.swing.JPanel();
        showSalaryStatistcs = new javax.swing.JButton();
        showWorkersList = new javax.swing.JButton();
        devicesPanel = new javax.swing.JPanel();
        searchDevice1 = new customComponents.searchDevice();
        salaryRatePanel = new javax.swing.JPanel();
        rateTitleLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        ratesTable = new javax.swing.JTable();
        nameLabel = new javax.swing.JLabel();
        dayRateLabel = new javax.swing.JLabel();
        overtimeLabel = new javax.swing.JLabel();
        weekendsLabel = new javax.swing.JLabel();
        rateNameTextField = new javax.swing.JTextField();
        overtimeTextField = new javax.swing.JTextField();
        weekendsTextField = new javax.swing.JTextField();
        dayRateTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        latesLabel = new javax.swing.JLabel();
        latesTextField = new javax.swing.JTextField();
        leaveTypesLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        leaveTypeTable = new javax.swing.JTable();
        leaveTypeNameLabel = new javax.swing.JLabel();
        leaveTypeMultiplierLabel = new javax.swing.JLabel();
        addLeaveTypeButton = new javax.swing.JButton();
        leaveTypeNameTextField = new javax.swing.JTextField();
        leaveTypeMultiplierTextField = new javax.swing.JTextField();
        personelLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        personellTabbedPane.setName("personellTabbedPane"); // NOI18N

        workerPanel.setName("workerPanel"); // NOI18N

        subWorkerPanel.setName("subWorkerPanel"); // NOI18N

        workerSchedulePanel.setName("workerSchedulePanel"); // NOI18N

        shiftSchedule1.setName("shiftSchedule1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(logIn.LogIn.class).getContext().getResourceMap(PersonnelFrame.class);
        jLabel29.setText(resourceMap.getString("jLabel29.text")); // NOI18N
        jLabel29.setName("jLabel29"); // NOI18N

        setNextShiftButton.setText(resourceMap.getString("setNextShiftButton.text")); // NOI18N
        setNextShiftButton.setName("setNextShiftButton"); // NOI18N
        setNextShiftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setNextShiftButtonActionPerformed(evt);
            }
        });

        availableShiftsComboBox.setName("availableShiftsComboBox"); // NOI18N

        javax.swing.GroupLayout workerSchedulePanelLayout = new javax.swing.GroupLayout(workerSchedulePanel);
        workerSchedulePanel.setLayout(workerSchedulePanelLayout);
        workerSchedulePanelLayout.setHorizontalGroup(
            workerSchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workerSchedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(availableShiftsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setNextShiftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(301, Short.MAX_VALUE))
            .addComponent(shiftSchedule1, javax.swing.GroupLayout.DEFAULT_SIZE, 841, Short.MAX_VALUE)
        );
        workerSchedulePanelLayout.setVerticalGroup(
            workerSchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workerSchedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(shiftSchedule1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(workerSchedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availableShiftsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setNextShiftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        subWorkerPanel.addTab(resourceMap.getString("workerSchedulePanel.TabConstraints.tabTitle"), workerSchedulePanel); // NOI18N

        freeTimeWorkerPanel.setName("freeTimeWorkerPanel"); // NOI18N

        leaveLabel.setText(resourceMap.getString("leaveLabel.text")); // NOI18N
        leaveLabel.setName("leaveLabel"); // NOI18N

        leaveYearLabel.setText(resourceMap.getString("leaveYearLabel.text")); // NOI18N
        leaveYearLabel.setName("leaveYearLabel"); // NOI18N

        leaveYearComboBox.setName("leaveYearComboBox"); // NOI18N
        leaveYearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveYearComboBoxActionPerformed(evt);
            }
        });

        jScrollPane11.setName("jScrollPane11"); // NOI18N

        leaveTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "OD", "DO", "TYP", "ZATWIERD≈π", "ODRZUƒÜ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        leaveTable.setName("leaveTable"); // NOI18N
        leaveTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        leaveTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane11.setViewportView(leaveTable);
        leaveTable.getColumnModel().getColumn(0).setResizable(false);
        leaveTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("leaveTable.columnModel.title5")); // NOI18N
        leaveTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("leaveTable.columnModel.title0")); // NOI18N
        leaveTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("leaveTable.columnModel.title1")); // NOI18N
        leaveTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("leaveTable.columnModel.title2")); // NOI18N
        leaveTable.getColumnModel().getColumn(4).setResizable(false);
        leaveTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("leaveTable.columnModel.title3")); // NOI18N
        leaveTable.getColumnModel().getColumn(5).setResizable(false);
        leaveTable.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("leaveTable.columnModel.title4")); // NOI18N

        javax.swing.GroupLayout freeTimeWorkerPanelLayout = new javax.swing.GroupLayout(freeTimeWorkerPanel);
        freeTimeWorkerPanel.setLayout(freeTimeWorkerPanelLayout);
        freeTimeWorkerPanelLayout.setHorizontalGroup(
            freeTimeWorkerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(freeTimeWorkerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(freeTimeWorkerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 829, Short.MAX_VALUE)
                    .addComponent(leaveLabel)
                    .addGroup(freeTimeWorkerPanelLayout.createSequentialGroup()
                        .addComponent(leaveYearLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leaveYearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        freeTimeWorkerPanelLayout.setVerticalGroup(
            freeTimeWorkerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(freeTimeWorkerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(leaveLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(freeTimeWorkerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leaveYearLabel)
                    .addComponent(leaveYearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );

        subWorkerPanel.addTab(resourceMap.getString("freeTimeWorkerPanel.TabConstraints.tabTitle"), freeTimeWorkerPanel); // NOI18N

        workerDevicePanel.setName("workerDevicePanel"); // NOI18N

        deviceAllocationLabel.setText(resourceMap.getString("deviceAllocationLabel.text")); // NOI18N
        deviceAllocationLabel.setName("deviceAllocationLabel"); // NOI18N

        workerDevicesbuttonGroup.add(freeDevicesRadioButton);
        freeDevicesRadioButton.setText(resourceMap.getString("freeDevicesRadioButton.text")); // NOI18N
        freeDevicesRadioButton.setName("freeDevicesRadioButton"); // NOI18N
        freeDevicesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freeDevicesRadioButtonActionPerformed(evt);
            }
        });

        workerDevicesbuttonGroup.add(ownedDevicesRadioButton);
        ownedDevicesRadioButton.setText(resourceMap.getString("ownedDevicesRadioButton.text")); // NOI18N
        ownedDevicesRadioButton.setName("ownedDevicesRadioButton"); // NOI18N
        ownedDevicesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ownedDevicesRadioButtonActionPerformed(evt);
            }
        });

        jScrollPane8.setName("jScrollPane8"); // NOI18N

        deviceAllocationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID_SPRZƒòTU", "OPIS", "CENA", "PRZYDZIELONY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        deviceAllocationTable.setName("deviceAllocationTable"); // NOI18N
        jScrollPane8.setViewportView(deviceAllocationTable);
        deviceAllocationTable.getColumnModel().getColumn(0).setMinWidth(120);
        deviceAllocationTable.getColumnModel().getColumn(0).setMaxWidth(120);
        deviceAllocationTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTable8.columnModel.title2")); // NOI18N
        deviceAllocationTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTable8.columnModel.title0")); // NOI18N
        deviceAllocationTable.getColumnModel().getColumn(2).setMinWidth(120);
        deviceAllocationTable.getColumnModel().getColumn(2).setMaxWidth(120);
        deviceAllocationTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTable8.columnModel.title1")); // NOI18N
        deviceAllocationTable.getColumnModel().getColumn(3).setMinWidth(90);
        deviceAllocationTable.getColumnModel().getColumn(3).setMaxWidth(90);
        deviceAllocationTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("deviceAllocationTable.columnModel.title3")); // NOI18N

        workerDevicesbuttonGroup.add(allocDevicesTableRadioButton);
        allocDevicesTableRadioButton.setText(resourceMap.getString("allocDevicesTableRadioButton.text")); // NOI18N
        allocDevicesTableRadioButton.setName("allocDevicesTableRadioButton"); // NOI18N
        allocDevicesTableRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allocDevicesTableRadioButtonActionPerformed(evt);
            }
        });

        showDevicesLabel.setText(resourceMap.getString("showDevicesLabel.text")); // NOI18N
        showDevicesLabel.setName("showDevicesLabel"); // NOI18N

        javax.swing.GroupLayout workerDevicePanelLayout = new javax.swing.GroupLayout(workerDevicePanel);
        workerDevicePanel.setLayout(workerDevicePanelLayout);
        workerDevicePanelLayout.setHorizontalGroup(
            workerDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workerDevicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(workerDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deviceAllocationLabel)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(workerDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ownedDevicesRadioButton)
                    .addComponent(freeDevicesRadioButton)
                    .addComponent(showDevicesLabel)
                    .addComponent(allocDevicesTableRadioButton))
                .addGap(0, 0, 0))
        );
        workerDevicePanelLayout.setVerticalGroup(
            workerDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workerDevicePanelLayout.createSequentialGroup()
                .addGroup(workerDevicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workerDevicePanelLayout.createSequentialGroup()
                        .addComponent(deviceAllocationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE))
                    .addGroup(workerDevicePanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(showDevicesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(freeDevicesRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ownedDevicesRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(allocDevicesTableRadioButton)))
                .addContainerGap())
        );

        subWorkerPanel.addTab(resourceMap.getString("workerDevicePanel.TabConstraints.tabTitle"), workerDevicePanel); // NOI18N

        workerSalaryPanel.setName("workerSalaryPanel"); // NOI18N

        formonthLabel.setText(resourceMap.getString("formonthLabel.text")); // NOI18N
        formonthLabel.setName("formonthLabel"); // NOI18N

        monthComboBox.setName("monthComboBox"); // NOI18N
        monthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboBoxActionPerformed(evt);
            }
        });

        yearLabel.setText(resourceMap.getString("yearLabel.text")); // NOI18N
        yearLabel.setName("yearLabel"); // NOI18N

        yearComboBox.setName("yearComboBox"); // NOI18N
        yearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearComboBoxActionPerformed(evt);
            }
        });

        rateLabel.setText(resourceMap.getString("rateLabel.text")); // NOI18N
        rateLabel.setName("rateLabel"); // NOI18N

        salaryDayLabel.setText(resourceMap.getString("salaryDayLabel.text")); // NOI18N
        salaryDayLabel.setName("salaryDayLabel"); // NOI18N

        salaryOvertimeLabel.setText(resourceMap.getString("salaryOvertimeLabel.text")); // NOI18N
        salaryOvertimeLabel.setName("salaryOvertimeLabel"); // NOI18N

        salaryOvertimeTextField.setEditable(false);
        salaryOvertimeTextField.setText(resourceMap.getString("salaryOvertimeTextField.text")); // NOI18N
        salaryOvertimeTextField.setName("salaryOvertimeTextField"); // NOI18N

        salaryDayTextField.setEditable(false);
        salaryDayTextField.setText(resourceMap.getString("salaryDayTextField.text")); // NOI18N
        salaryDayTextField.setName("salaryDayTextField"); // NOI18N

        salaryWeekendsLabel.setText(resourceMap.getString("salaryWeekendsLabel.text")); // NOI18N
        salaryWeekendsLabel.setName("salaryWeekendsLabel"); // NOI18N

        salarylatesLabel.setText(resourceMap.getString("salarylatesLabel.text")); // NOI18N
        salarylatesLabel.setName("salarylatesLabel"); // NOI18N

        salaryLatesTextField.setEditable(false);
        salaryLatesTextField.setText(resourceMap.getString("salaryLatesTextField.text")); // NOI18N
        salaryLatesTextField.setName("salaryLatesTextField"); // NOI18N

        salaryWeekendTextField.setEditable(false);
        salaryWeekendTextField.setText(resourceMap.getString("salaryWeekendTextField.text")); // NOI18N
        salaryWeekendTextField.setName("salaryWeekendTextField"); // NOI18N

        changeRateLabel.setText(resourceMap.getString("changeRateLabel.text")); // NOI18N
        changeRateLabel.setName("changeRateLabel"); // NOI18N

        rateComboBox.setName("rateComboBox"); // NOI18N
        rateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rateComboBoxActionPerformed(evt);
            }
        });

        applyRateButton.setText(resourceMap.getString("applyRateButton.text")); // NOI18N
        applyRateButton.setName("applyRateButton"); // NOI18N
        applyRateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyRateButtonActionPerformed(evt);
            }
        });

        overtimeCountLabel.setLabelFor(overtimeCountTextField);
        overtimeCountLabel.setText(resourceMap.getString("overtimeCountLabel.text")); // NOI18N
        overtimeCountLabel.setName("overtimeCountLabel"); // NOI18N

        overtimeCountTextField.setEditable(false);
        overtimeCountTextField.setText(resourceMap.getString("overtimeCountTextField.text")); // NOI18N
        overtimeCountTextField.setName("overtimeCountTextField"); // NOI18N

        latesCountTextField.setEditable(false);
        latesCountTextField.setText(resourceMap.getString("latesCountTextField.text")); // NOI18N
        latesCountTextField.setName("latesCountTextField"); // NOI18N

        lateCountLabel.setText(resourceMap.getString("lateCountLabel.text")); // NOI18N
        lateCountLabel.setName("lateCountLabel"); // NOI18N

        hoursCountLabel.setText(resourceMap.getString("hoursCountLabel.text")); // NOI18N
        hoursCountLabel.setName("hoursCountLabel"); // NOI18N

        hoursCountTextField.setEditable(false);
        hoursCountTextField.setText(resourceMap.getString("hoursCountTextField.text")); // NOI18N
        hoursCountTextField.setName("hoursCountTextField"); // NOI18N

        weekendsCountTextField.setEditable(false);
        weekendsCountTextField.setText(resourceMap.getString("weekendsCountTextField.text")); // NOI18N
        weekendsCountTextField.setName("weekendsCountTextField"); // NOI18N

        weekendsCountLabel.setText(resourceMap.getString("weekendsCountLabel.text")); // NOI18N
        weekendsCountLabel.setName("weekendsCountLabel"); // NOI18N

        jLabel36.setText(resourceMap.getString("jLabel36.text")); // NOI18N
        jLabel36.setName("jLabel36"); // NOI18N

        bonusTextField.setText(resourceMap.getString("bonusTextField.text")); // NOI18N
        bonusTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bonusTextField.setName("bonusTextField"); // NOI18N
        bonusTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bonusTextFieldActionPerformed(evt);
            }
        });

        sumTextField.setEditable(false);
        sumTextField.setText(resourceMap.getString("sumTextField.text")); // NOI18N
        sumTextField.setName("sumTextField"); // NOI18N

        sumLabel.setText(resourceMap.getString("sumLabel.text")); // NOI18N
        sumLabel.setName("sumLabel"); // NOI18N

        forWhatLabel.setText(resourceMap.getString("forWhatLabel.text")); // NOI18N
        forWhatLabel.setName("forWhatLabel"); // NOI18N

        forWhatTextField.setText(resourceMap.getString("forWhatTextField.text")); // NOI18N
        forWhatTextField.setName("forWhatTextField"); // NOI18N

        applySalaryButton.setText(resourceMap.getString("applySalaryButton.text")); // NOI18N
        applySalaryButton.setName("applySalaryButton"); // NOI18N
        applySalaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applySalaryButtonActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setName("jSeparator3"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        leaveTimeTextField.setEditable(false);
        leaveTimeTextField.setText(resourceMap.getString("leaveTimeTextField.text")); // NOI18N
        leaveTimeTextField.setName("leaveTimeTextField"); // NOI18N

        isPayedLabel.setForeground(resourceMap.getColor("isPayedLabel.foreground")); // NOI18N
        isPayedLabel.setText(resourceMap.getString("isPayedLabel.text")); // NOI18N
        isPayedLabel.setName("isPayedLabel"); // NOI18N

        wasRateLabel.setForeground(resourceMap.getColor("wasRateLabel.foreground")); // NOI18N
        wasRateLabel.setText(resourceMap.getString("wasRateLabel.text")); // NOI18N
        wasRateLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        wasRateLabel.setName("wasRateLabel"); // NOI18N

        wasRateValueLabel.setForeground(resourceMap.getColor("wasRateValueLabel.foreground")); // NOI18N
        wasRateValueLabel.setText(resourceMap.getString("wasRateValueLabel.text")); // NOI18N
        wasRateValueLabel.setName("wasRateValueLabel"); // NOI18N

        javax.swing.GroupLayout workerSalaryPanelLayout = new javax.swing.GroupLayout(workerSalaryPanel);
        workerSalaryPanel.setLayout(workerSalaryPanelLayout);
        workerSalaryPanelLayout.setHorizontalGroup(
            workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                        .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(applyRateButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workerSalaryPanelLayout.createSequentialGroup()
                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, workerSalaryPanelLayout.createSequentialGroup()
                                        .addComponent(salaryOvertimeLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(salaryOvertimeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, workerSalaryPanelLayout.createSequentialGroup()
                                        .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                                                        .addComponent(salaryDayLabel)
                                                        .addGap(26, 26, 26))
                                                    .addComponent(wasRateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(salarylatesLabel)
                                                .addComponent(salaryWeekendsLabel)))
                                        .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(salaryDayTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                            .addComponent(salaryWeekendTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                            .addComponent(salaryLatesTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                            .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                                                .addGap(28, 28, 28)
                                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(rateComboBox, 0, 90, Short.MAX_VALUE)
                                                    .addComponent(wasRateValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))))))
                                .addGap(64, 64, 64)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                        .addComponent(rateLabel)
                        .addGap(226, 226, 226))
                    .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                        .addComponent(changeRateLabel)
                        .addGap(182, 182, 182)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                        .addComponent(formonthLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addComponent(yearLabel)
                        .addGap(31, 31, 31)
                        .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lateCountLabel)
                    .addComponent(hoursCountLabel)
                    .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                        .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(weekendsCountLabel)
                            .addComponent(jLabel36)
                            .addComponent(sumLabel)
                            .addComponent(jLabel1)
                            .addComponent(forWhatLabel)
                            .addComponent(overtimeCountLabel)
                            .addComponent(isPayedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(leaveTimeTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(overtimeCountTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(latesCountTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(hoursCountTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(weekendsCountTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(sumTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(bonusTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                            .addComponent(applySalaryButton)
                            .addComponent(forWhatTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))))
                .addGap(705, 705, 705))
        );
        workerSalaryPanelLayout.setVerticalGroup(
            workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workerSalaryPanelLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeRateLabel)
                    .addComponent(rateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salaryOvertimeLabel)
                    .addComponent(salaryOvertimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(469, 469, 469))
            .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salaryDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salaryDayLabel))
                .addContainerGap(542, Short.MAX_VALUE))
            .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                        .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(formonthLabel)
                            .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yearLabel)
                            .addComponent(rateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(overtimeCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(overtimeCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lateCountLabel)
                                    .addComponent(latesCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(hoursCountLabel)
                                    .addComponent(hoursCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(weekendsCountLabel)
                                    .addComponent(weekendsCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel36)
                                    .addComponent(bonusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sumLabel)
                                    .addComponent(sumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(leaveTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(2, 2, 2))
                            .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(wasRateLabel)
                                    .addComponent(wasRateValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(salaryWeekendTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(salaryWeekendsLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(salaryLatesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(salarylatesLabel))
                                .addGap(14, 14, 14)))
                        .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(workerSalaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                                        .addComponent(forWhatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(applySalaryButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addComponent(applyRateButton)))
                            .addGroup(workerSalaryPanelLayout.createSequentialGroup()
                                .addComponent(forWhatLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(isPayedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(426, 426, 426))))
        );

        subWorkerPanel.addTab(resourceMap.getString("workerSalaryPanel.TabConstraints.tabTitle"), workerSalaryPanel); // NOI18N

        searchWorker1.setName("searchWorker1"); // NOI18N

        javax.swing.GroupLayout workerPanelLayout = new javax.swing.GroupLayout(workerPanel);
        workerPanel.setLayout(workerPanelLayout);
        workerPanelLayout.setHorizontalGroup(
            workerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workerPanelLayout.createSequentialGroup()
                .addGroup(workerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(workerPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(subWorkerPanel, 0, 0, Short.MAX_VALUE))
                    .addComponent(searchWorker1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );
        workerPanelLayout.setVerticalGroup(
            workerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workerPanelLayout.createSequentialGroup()
                .addComponent(searchWorker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subWorkerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        personellTabbedPane.addTab(resourceMap.getString("workerPanel.TabConstraints.tabTitle"), workerPanel); // NOI18N

        schedulePanel.setName("schedulePanel"); // NOI18N

        jLabel21.setText(resourceMap.getString("jLabel21.text")); // NOI18N
        jLabel21.setName("jLabel21"); // NOI18N

        jLabel19.setText(resourceMap.getString("jLabel19.text")); // NOI18N
        jLabel19.setName("jLabel19"); // NOI18N

        allShiftsSchedule.setName("allShiftsSchedule"); // NOI18N

        editShiftSchedule.setGrafik(true);
        editShiftSchedule.setName("editShiftSchedule"); // NOI18N
        editShiftSchedule.setShiftMode(java.lang.Boolean.TRUE);

        jSeparator4.setName("jSeparator4"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        shiftIdList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Zmiany"
            }
        ));
        shiftIdList.setName("shiftIdList"); // NOI18N
        shiftIdList.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        shiftIdList.setShowHorizontalLines(false);
        shiftIdList.setShowVerticalLines(false);
        jScrollPane2.setViewportView(shiftIdList);
        shiftIdList.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("shiftIdList.columnModel.title0")); // NOI18N

        coppyShiftButton.setText(resourceMap.getString("coppyShiftButton.text")); // NOI18N
        coppyShiftButton.setName("coppyShiftButton"); // NOI18N
        coppyShiftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coppyShiftButtonActionPerformed(evt);
            }
        });

        deleteShiftButton.setText(resourceMap.getString("deleteShiftButton.text")); // NOI18N
        deleteShiftButton.setName("deleteShiftButton"); // NOI18N
        deleteShiftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteShiftButtonActionPerformed(evt);
            }
        });

        editMonthComboBox.setName("editMonthComboBox"); // NOI18N

        editYearComboBox.setName("editYearComboBox"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        editShiftComboBox.setName("editShiftComboBox"); // NOI18N

        editShiftLabel.setText(resourceMap.getString("editShiftLabel.text")); // NOI18N
        editShiftLabel.setName("editShiftLabel"); // NOI18N

        javax.swing.GroupLayout schedulePanelLayout = new javax.swing.GroupLayout(schedulePanel);
        schedulePanel.setLayout(schedulePanelLayout);
        schedulePanelLayout.setHorizontalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addGroup(schedulePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 853, Short.MAX_VALUE))
                    .addComponent(jLabel19)
                    .addComponent(editShiftSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, 853, Short.MAX_VALUE)
                    .addGroup(schedulePanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(allShiftsSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE))
                    .addGroup(schedulePanelLayout.createSequentialGroup()
                        .addComponent(coppyShiftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editMonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editYearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editShiftLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editShiftComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 239, Short.MAX_VALUE)
                        .addComponent(deleteShiftButton))))
        );
        schedulePanelLayout.setVerticalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addComponent(jLabel21)
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(schedulePanelLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(schedulePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(allShiftsSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editShiftSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(coppyShiftButton)
                    .addComponent(editMonthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(editYearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editShiftLabel)
                    .addComponent(editShiftComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteShiftButton))
                .addContainerGap())
        );

        personellTabbedPane.addTab(resourceMap.getString("schedulePanel.TabConstraints.tabTitle"), schedulePanel); // NOI18N

        staticticsPanel.setName("staticticsPanel"); // NOI18N
        staticticsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 20, 20));

        showSalaryStatistcs.setIcon(resourceMap.getIcon("showSalaryStatistcs.icon")); // NOI18N
        showSalaryStatistcs.setText(resourceMap.getString("showSalaryStatistcs.text")); // NOI18N
        showSalaryStatistcs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showSalaryStatistcs.setName("showSalaryStatistcs"); // NOI18N
        showSalaryStatistcs.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        showSalaryStatistcs.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        showSalaryStatistcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSalaryStatistcsActionPerformed(evt);
            }
        });
        staticticsPanel.add(showSalaryStatistcs);

        showWorkersList.setIcon(resourceMap.getIcon("showWorkersList.icon")); // NOI18N
        showWorkersList.setText(resourceMap.getString("showWorkersList.text")); // NOI18N
        showWorkersList.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showWorkersList.setName("showWorkersList"); // NOI18N
        showWorkersList.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        showWorkersList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showWorkersListActionPerformed(evt);
            }
        });
        staticticsPanel.add(showWorkersList);

        personellTabbedPane.addTab(resourceMap.getString("staticticsPanel.TabConstraints.tabTitle"), staticticsPanel); // NOI18N

        devicesPanel.setName("devicesPanel"); // NOI18N

        searchDevice1.setName("searchDevice1"); // NOI18N

        javax.swing.GroupLayout devicesPanelLayout = new javax.swing.GroupLayout(devicesPanel);
        devicesPanel.setLayout(devicesPanelLayout);
        devicesPanelLayout.setHorizontalGroup(
            devicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(devicesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchDevice1, javax.swing.GroupLayout.DEFAULT_SIZE, 841, Short.MAX_VALUE)
                .addContainerGap())
        );
        devicesPanelLayout.setVerticalGroup(
            devicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(devicesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchDevice1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );

        personellTabbedPane.addTab(resourceMap.getString("devicesPanel.TabConstraints.tabTitle"), devicesPanel); // NOI18N

        salaryRatePanel.setName("salaryRatePanel"); // NOI18N

        rateTitleLabel.setText(resourceMap.getString("rateTitleLabel.text")); // NOI18N
        rateTitleLabel.setName("rateTitleLabel"); // NOI18N

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        ratesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID_STAWKI", "DZIENNA", "NADGODZINY", "WEEKENDY", "SP√ì≈πNIENIA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ratesTable.setName("ratesTable"); // NOI18N
        ratesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ratesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(ratesTable);
        ratesTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("ratesTable.columnModel.title0")); // NOI18N
        ratesTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("ratesTable.columnModel.title1")); // NOI18N
        ratesTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("ratesTable.columnModel.title2")); // NOI18N
        ratesTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("ratesTable.columnModel.title3")); // NOI18N
        ratesTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("ratesTable.columnModel.title4")); // NOI18N

        nameLabel.setText(resourceMap.getString("nameLabel.text")); // NOI18N
        nameLabel.setName("nameLabel"); // NOI18N

        dayRateLabel.setText(resourceMap.getString("dayRateLabel.text")); // NOI18N
        dayRateLabel.setName("dayRateLabel"); // NOI18N

        overtimeLabel.setText(resourceMap.getString("overtimeLabel.text")); // NOI18N
        overtimeLabel.setName("overtimeLabel"); // NOI18N

        weekendsLabel.setText(resourceMap.getString("weekendsLabel.text")); // NOI18N
        weekendsLabel.setName("weekendsLabel"); // NOI18N

        rateNameTextField.setText(resourceMap.getString("rateNameTextField.text")); // NOI18N
        rateNameTextField.setName("rateNameTextField"); // NOI18N

        overtimeTextField.setText(resourceMap.getString("overtimeTextField.text")); // NOI18N
        overtimeTextField.setName("overtimeTextField"); // NOI18N

        weekendsTextField.setText(resourceMap.getString("weekendsTextField.text")); // NOI18N
        weekendsTextField.setName("weekendsTextField"); // NOI18N

        dayRateTextField.setText(resourceMap.getString("dayRateTextField.text")); // NOI18N
        dayRateTextField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        dayRateTextField.setName("dayRateTextField"); // NOI18N

        addButton.setText(resourceMap.getString("addButton.text")); // NOI18N
        addButton.setName("addButton"); // NOI18N
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addButtonMouseClicked(evt);
            }
        });

        latesLabel.setText(resourceMap.getString("latesLabel.text")); // NOI18N
        latesLabel.setName("latesLabel"); // NOI18N

        latesTextField.setName("latesTextField"); // NOI18N

        leaveTypesLabel.setText(resourceMap.getString("leaveTypesLabel.text")); // NOI18N
        leaveTypesLabel.setName("leaveTypesLabel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        leaveTypeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID TYPU ZWOLNIENIA", "NAZWA ZWOLNIENIA", "MNO≈ªNIK"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        leaveTypeTable.setName("leaveTypeTable"); // NOI18N
        leaveTypeTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        leaveTypeTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(leaveTypeTable);
        leaveTypeTable.getColumnModel().getColumn(0).setResizable(false);
        leaveTypeTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        leaveTypeTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("leaveTypeTable.columnModel.title0")); // NOI18N
        leaveTypeTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("leaveTypeTable.columnModel.title1")); // NOI18N
        leaveTypeTable.getColumnModel().getColumn(2).setMinWidth(70);
        leaveTypeTable.getColumnModel().getColumn(2).setPreferredWidth(70);
        leaveTypeTable.getColumnModel().getColumn(2).setMaxWidth(20);
        leaveTypeTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("leaveTypeTable.columnModel.title2")); // NOI18N

        leaveTypeNameLabel.setText(resourceMap.getString("leaveTypeNameLabel.text")); // NOI18N
        leaveTypeNameLabel.setName("leaveTypeNameLabel"); // NOI18N

        leaveTypeMultiplierLabel.setText(resourceMap.getString("leaveTypeMultiplierLabel.text")); // NOI18N
        leaveTypeMultiplierLabel.setName("leaveTypeMultiplierLabel"); // NOI18N

        addLeaveTypeButton.setText(resourceMap.getString("addLeaveTypeButton.text")); // NOI18N
        addLeaveTypeButton.setName("addLeaveTypeButton"); // NOI18N
        addLeaveTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLeaveTypeButtonActionPerformed(evt);
            }
        });

        leaveTypeNameTextField.setText(resourceMap.getString("leaveTypeNameTextField.text")); // NOI18N
        leaveTypeNameTextField.setName("leaveTypeNameTextField"); // NOI18N

        leaveTypeMultiplierTextField.setText(resourceMap.getString("leaveTypeMultiplierTextField.text")); // NOI18N
        leaveTypeMultiplierTextField.setName("leaveTypeMultiplierTextField"); // NOI18N

        javax.swing.GroupLayout salaryRatePanelLayout = new javax.swing.GroupLayout(salaryRatePanel);
        salaryRatePanel.setLayout(salaryRatePanelLayout);
        salaryRatePanelLayout.setHorizontalGroup(
            salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salaryRatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(salaryRatePanelLayout.createSequentialGroup()
                        .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addButton)
                            .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(salaryRatePanelLayout.createSequentialGroup()
                                    .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(salaryRatePanelLayout.createSequentialGroup()
                                            .addComponent(overtimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(overtimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(salaryRatePanelLayout.createSequentialGroup()
                                            .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(nameLabel)
                                                .addComponent(dayRateLabel))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(rateNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                                .addComponent(dayRateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))))
                                    .addGap(17, 17, 17))
                                .addGroup(salaryRatePanelLayout.createSequentialGroup()
                                    .addComponent(latesLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(latesTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                    .addGap(18, 18, 18))
                                .addGroup(salaryRatePanelLayout.createSequentialGroup()
                                    .addComponent(weekendsLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(weekendsTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                    .addGap(17, 17, 17))
                                .addGroup(salaryRatePanelLayout.createSequentialGroup()
                                    .addComponent(rateTitleLabel)
                                    .addGap(2, 2, 2))))
                        .addGap(25, 25, 25))
                    .addComponent(leaveTypesLabel)
                    .addComponent(leaveTypeNameLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, salaryRatePanelLayout.createSequentialGroup()
                        .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, salaryRatePanelLayout.createSequentialGroup()
                                .addComponent(leaveTypeMultiplierLabel)
                                .addGap(18, 18, 18)
                                .addComponent(leaveTypeMultiplierTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                            .addComponent(leaveTypeNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE))
                        .addGap(57, 57, 57))
                    .addComponent(addLeaveTypeButton))
                .addGap(0, 0, 0)
                .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, 0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE))
                .addContainerGap())
        );
        salaryRatePanelLayout.setVerticalGroup(
            salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salaryRatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, 0, 264, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, salaryRatePanelLayout.createSequentialGroup()
                        .addComponent(rateTitleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameLabel)
                            .addComponent(rateNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(dayRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dayRateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(overtimeLabel)
                            .addComponent(overtimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(latesLabel)
                            .addComponent(latesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(weekendsLabel)
                            .addComponent(weekendsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addButton)))
                .addGap(37, 37, 37)
                .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(salaryRatePanelLayout.createSequentialGroup()
                        .addComponent(leaveTypesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leaveTypeNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leaveTypeNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(salaryRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(leaveTypeMultiplierLabel)
                            .addComponent(leaveTypeMultiplierTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addLeaveTypeButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                .addContainerGap())
        );

        personellTabbedPane.addTab(resourceMap.getString("salaryRatePanel.TabConstraints.tabTitle"), salaryRatePanel); // NOI18N

        personelLabel.setFont(resourceMap.getFont("personelLabel.font")); // NOI18N
        personelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        personelLabel.setText(resourceMap.getString("personelLabel.text")); // NOI18N
        personelLabel.setName("personelLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(personelLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 870, Short.MAX_VALUE)
                    .addComponent(personellTabbedPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 870, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(personelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(personellTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

/**
 * Funkcja wywo≈Çywana po naci≈õniƒôciu przycisku Dodaj, w zak≈ÇƒÖdce stawki, Dodaje nowƒÖ stawkƒô 
 * @param evt
 */
private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
        try {
            //sprawd≈∫ czy poprawne warto≈õci w polach wej≈õciowych
            String doubleValue;
            java.util.regex.Matcher m;
            java.util.regex.Pattern p =java.util.regex.Pattern.compile("\\d*[\\.\\d]\\d*");
            
            Border red=new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 1, true);
            Border black=new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 0), 1, true);
            
            JTextField text[]=new JTextField[4];
            text[0]=dayRateTextField;
            text[1]=overtimeTextField;
            text[2]=latesTextField;
            text[3]=weekendsTextField;
            boolean fail=false;//czy jakie≈õ pole b≈Çƒôdne?
            for (JTextField t: text){
                doubleValue = t.getText();
                if (doubleValue.equals("")) doubleValue = "0.0";
                
                m = p.matcher(doubleValue);

                if (!m.matches()) {
                    t.setBorder(red);
                    fail=true;
                }
                 else 
                    t.setBorder(black);
            }
            
            if (fail) return;
            
            java.sql.Statement stmt=DBConn.getConnection().createStatement();
            ResultSet rs=stmt.executeQuery("SELECT MAX(id_stawki) From Stawka");
            int id_stawki=0;
            if(rs.next()) id_stawki=rs.getInt(1)+1;
            
            java.sql.PreparedStatement pstmt = DBConn.getConnection().prepareStatement(
                    "INSERT INTO Stawka (nazwa, dzienna, nadgodziny, spoznienia, weekendy, id_stawki)" +
                    " values (?,?,?,?,?,?)");
            if (rateNameTextField.getText().length() > 30) return;
            pstmt.setString(1,rateNameTextField.getText());
            pstmt.setDouble(2,Double.parseDouble(dayRateTextField.getText()));
            pstmt.setDouble(3,Double.parseDouble(overtimeTextField.getText()));
            pstmt.setDouble(4,Double.parseDouble(latesTextField.getText()));
            pstmt.setDouble(5,Double.parseDouble(weekendsTextField.getText()));
            pstmt.setInt(6,id_stawki);
            pstmt.execute();
            pstmt.close();
            
            
            DefaultTableModel model=(DefaultTableModel)ratesTable.getModel();
            Object[] obj=new Object[6];
            obj[0]=new Integer(id_stawki);
            obj[1]=new String(rateNameTextField.getText());
            obj[2]=new Double(Double.parseDouble(dayRateTextField.getText()));
            obj[3]=new Double(Double.parseDouble(overtimeTextField.getText()));
            obj[4]=new Double(Double.parseDouble(weekendsTextField.getText()));
            obj[5]=new Double(Double.parseDouble(latesTextField.getText()));
            model.addRow(obj);
         
            
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    
}//GEN-LAST:event_addButtonMouseClicked

/**
 * Inicjuje formatkƒô odpowiedzialnƒÖ za edycjƒô i dodawanie nowych typ√≥w zwolnie≈Ñ.
 */
private void initLeaveTypesPanel(){
        DefaultTableModel model =(DefaultTableModel)leaveTypeTable.getModel();
        //dodanie obiekktu, kt√≥ry uaktualni bazƒô w przypadku zmiany warto≈õci w tabeli
        model.addTableModelListener(new TableModelListener() {

            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column = e.getColumn();
                TableModel model = (TableModel)e.getSource();
                String columnName = model.getColumnName(column);
                Connection conn=DBConn.getConnection();
                String sql="UPDATE Typy_zwolnien SET ";
                if (model.getColumnName(column).equals("NAZWA ZWOLNIENIA")) 
                    sql+="nazwa_zwolnienia=?";
                else if (model.getColumnName(column).equals("MNO≈ªNIK"))
                    sql+="mnoznik=?";
                else return;
                sql+=" WHERE id_typu=?";
                
                PreparedStatement pstmt;
                try {
                    pstmt = conn.prepareStatement(sql);
                    if (model.getColumnName(column).equals("NAZWA ZWOLNIENIA")) 
                        pstmt.setString(1,(String)model.getValueAt(row, column));
                    else if (model.getColumnName(column).equals("MNO≈ªNIK")) {
                        Double d=(Double)model.getValueAt(row, column);;
                        if (d<0){ 
                            d=d*(-1.0);
                            model.setValueAt(d, row, column);
                            return;
                        }

                        pstmt.setDouble(1, (Double)model.getValueAt(row, column));
                    }
                    else return;
                    int i=0;
                    for (i=0;i<model.getColumnCount();i++)
                        if (model.getColumnName(i).equals("ID TYPU ZWOLNIENIA")) break;
                    
                    pstmt.setInt(2, (Integer)model.getValueAt(row, i));

                  
                    pstmt.execute();
                }
                catch (SQLException ex) {
                        Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);    
                }
            }
        });
        try {

            //wype≈Çnienie tabeliki z typami zwolnie≈Ñ
            PreparedStatement pstmt = DBConn.getConnection().prepareStatement("SELECT id_typu, nazwa_zwolnienia, mnoznik FROM Typy_zwolnien");
            ResultSet rs=pstmt.executeQuery();
            
            while (rs.next()){
                Object [] obj=new Object[3];
                obj[0]=rs.getInt(1);
                obj[1]=rs.getString(2);
                obj[2]=rs.getDouble(3);
                model.addRow(obj);
            }
            
            ListSelectionModel ls=leaveTypeTable.getSelectionModel();
            ls.addListSelectionListener(new ListSelectionListener() {

                public void valueChanged(ListSelectionEvent e) {
                    if (e.getValueIsAdjusting()) return;
                    ListSelectionModel lsm=(ListSelectionModel)e.getSource();
                    if (lsm.isSelectionEmpty()) return;
                    int i=lsm.getMinSelectionIndex();                    
                    leaveTypeNameTextField.setText(leaveTypeTable.getValueAt(i, 1).toString());
                    leaveTypeMultiplierTextField.setText(leaveTypeTable.getValueAt(i, 2).toString());
                }
            });

        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        

}

/**
 * Funkcja inicjuje formatkƒô wy≈õwietlajacƒÖ urzƒÖdzenia w firmie.
 */
private void initDevicesPanel(){
    //kadrowy nie mo≈ºe modyfikowaƒá listy sprzƒôtu, wiec usuwamy te przyciski.
   
}

/**
 * Akcja wykonywana po wyborze stawki dla pracownika, wy≈õwietla nowƒÖ stawkƒô.
 * (poprzez wyb√≥r w comboboxie: WorkerPanel->workerSalaryPanel)
 * @param evt
 */
private void rateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rateComboBoxActionPerformed
        try {

            //ustawiamy warto≈õci stawek wybranych w comboboxie
            Connection conn = DBConn.getConnection();
            PreparedStatement pstmt = conn.prepareStatement("SELECT nazwa, dzienna, nadgodziny, weekendy, spoznienia FROM Stawka WHERE nazwa=?");
            pstmt.setString(1,(String) rateComboBox.getSelectedItem());
            ResultSet rs = pstmt.executeQuery();
            if(!rs.next()) return;
            salaryDayTextField.setText(Double.toString(rs.getDouble(2)));
            salaryOvertimeTextField.setText(Double.toString(rs.getDouble(3)));
            salaryWeekendTextField.setText(Double.toString(rs.getDouble(4)));
            salaryLatesTextField.setText(Double.toString(rs.getDouble(5)));
            wasRateLabel.setText("Bylo");
            wasRateValueLabel.setText(oldRateName);
            
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);//GEN-LAST:event_rateComboBoxActionPerformed
        }
}


/** Ustawia dla wybranego u≈ºytkownika nowƒÖ stawkƒô, kt√≥ra jest zaznaczona w rateComboBox
 * @param evt
 */
private void applyRateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyRateButtonActionPerformed
        try {
            //przypisaƒá wybranƒÖ stawkƒô pracownikowi
            Connection conn = DBConn.getConnection();
            PreparedStatement pstmt = conn.prepareStatement("SELECT id_stawki FROM Stawka WHERE nazwa=?");
            pstmt.setString(1, (String)rateComboBox.getSelectedItem());
            ResultSet rs = pstmt.executeQuery();
            
            if (!rs.next()) return;
            usr.setIdStawki(rs.getInt(1)); //uaktualnie nie struktury uzytkownika

            //i zapisanie do bazy
            pstmt=conn.prepareStatement("UPDATE Pracownik SET id_stawki=? WHERE id_pracownika=?");
            pstmt.setInt(1, usr.getIdStawki());
            pstmt.setInt(2, usr.getId());
            pstmt.execute();
            oldRateName=(String)rateComboBox.getSelectedItem();
            wasRateLabel.setText("");
            wasRateValueLabel.setText("");
            
            updateSalaryWindow();
            
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
}//GEN-LAST:event_applyRateButtonActionPerformed


/**
 * Akcja wywo≈Çywana przez monthComboBox, okre≈õlajƒÖcego za jaki miesiƒÖc wyp≈Çaciƒá 
 * pracownikowi pensjƒô.  Uaktualnia pola wy≈õwietlajƒÖce przepracowane dni.
 * @param evt
 */
private void monthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboBoxActionPerformed
    if (initialization) return;
    updateSalaryWindow();
}//GEN-LAST:event_monthComboBoxActionPerformed

/**
 * Akcja wywo≈Çywana przez yearComboBox, okre≈õlajƒÖcego za jaki rok wyp≈Çaciƒá 
 * pracownikowi pensjƒô. Uaktualnia pola wy≈õwietlajƒÖce przepracowane dni.
 * @param evt
 */
private void yearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearComboBoxActionPerformed
    if (initialization) return;
    monthComboBoxActionPerformed(evt);//przekierowanie na drugƒÖ funkcje, bo robiƒÖ to samo
}//GEN-LAST:event_yearComboBoxActionPerformed

/**
 * Akcja wywo≈Çana po naci≈õniƒôciu przycisku dodaj w WorkerPanel->workerSalaryPanel
 * Dokonuje wpisu do bazy danych o dokonanej wyp≈Çacie.
 * @param evt
 */
private void applySalaryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applySalaryButtonActionPerformed
        try {
            Border red=new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 1, true);
            Border green=new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 0), 1, true);

                        
            java.util.regex.Pattern p =java.util.regex.Pattern.compile("\\d*[\\.\\d]\\d{0,7}");
            java.util.regex.Matcher m=p.matcher(bonusTextField.getText());
            if (!m.matches()){
                bonusTextField.setBorder(red);
                System.out.print("no match");
                return;
            }else bonusTextField.setBorder(green);
            
            Double d1=Double.parseDouble(sumTextField.getText());
            d1+=Double.parseDouble(bonusTextField.getText());
    
            
            //zapisaƒá do bazy danych informacjƒô o wys≈Çaniu wyp≈Çaty.
            if (usr==null || usr.getId()<0){
             applySalaryButton.setBorder(red);
             return;
            }
            int workerId = usr.getId();
            Connection conn = DBConn.getConnection();
            PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Wyplaty (id_pracownika,kwota,data_od,za_co) values(?,?,CURDATE(),?)");
            pstmt.setInt(1, workerId);

            pstmt.setDouble(2,d1);
            pstmt.setString(3, forWhatTextField.getText());
            pstmt.execute();
            
            //Wyswietliƒá informacjƒô o udanej akcji
            isPayedLabel.setText("Zatwierdzono");
            applySalaryButton.setBorder(green);
            
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    
}//GEN-LAST:event_applySalaryButtonActionPerformed


private void leaveYearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveYearComboBoxActionPerformed
        try {
            
            Connection conn = DBConn.getConnection();
            PreparedStatement pstmt = conn.prepareStatement("SELECT z.id_zwolnienia, z.zwolnienie_od, z.zwolnienie_do, t.nazwa_zwolnienia, " + 
                                                            "z.zatwierdzone, z.odrzucone " +
                                                            "FROM Zwolnienia z JOIN Typy_zwolnien t USING(id_typu) " + 
                                                            "WHERE z.id_pracownika=? AND (YEAR(z.zwolnienie_od)=? OR YEAR(z.zwolnienie_do)=?)");
            if (usr==null) return;
            if (leaveYearComboBox.getItemCount()==0) return;
            pstmt.setInt(1, usr.getId());
            pstmt.setInt(2, (Integer) leaveYearComboBox.getSelectedItem());
            pstmt.setInt(3, (Integer) leaveYearComboBox.getSelectedItem());
            ResultSet rs=pstmt.executeQuery();
            
            DefaultTableModel tabmodel=new DefaultTableModel(){

                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    return getValueAt(0, columnIndex).getClass();
                }

                @Override
                public boolean isCellEditable(int row, int column) {
                    if (getValueAt(0, column) instanceof Boolean) return true;
                    return false;//tylko pola boolean mo≈ºliwe do edycji
                }
            };
            tabmodel.setColumnIdentifiers(new String[]{"ID","OD","DO","TYP","ZATWIERD≈π","ODRZUƒÜ"});        
            
            while (rs.next()){
                Object []obj=new Object[6];
                obj[0]=rs.getInt(1);
                obj[1]=rs.getDate(2);
                obj[2]=rs.getDate(3);
                obj[3]=rs.getString(4);
                obj[4]=rs.getBoolean(5);
                obj[5]=rs.getBoolean(6);
                
                tabmodel.addRow(obj);
            }
            tabmodel.addTableModelListener(new TableModelListener() {

                public void tableChanged(TableModelEvent e) {
                    TableModel tabmodel=(TableModel)e.getSource();
                    int column =e.getColumn();
                    if (column==TableModelEvent.ALL_COLUMNS) return;
                    int row=e.getFirstRow();
                    boolean zatwierdz=false;
                    boolean odrzuc=false;
                    int zatwierdz_col=6;
                    int odrzuc_col=5;
                    int id=0;
                    
                    for(int i=tabmodel.getColumnCount()-1; i>=0 ;i--){
                        if (tabmodel.getColumnName(i).equals("ZATWIERD≈π")) {
                            zatwierdz=(Boolean)tabmodel.getValueAt(row, i);
                            zatwierdz_col=i;
                            
                        }
                        else if (tabmodel.getColumnName(i).equals("ODRZUƒÜ")){
                            odrzuc=(Boolean)tabmodel.getValueAt(row,i);
                            odrzuc_col=i;
                        }
                        else if(tabmodel.getColumnName(i).equals("ID")){
                            id=(Integer)tabmodel.getValueAt(row, i);
                        }
                    }
                    
                    if ((odrzuc && (odrzuc_col==column)) && zatwierdz){

                        zatwierdz=false;
                        tabmodel.removeTableModelListener(this);
                        tabmodel.setValueAt(false, row, zatwierdz_col);
                        tabmodel.addTableModelListener(this);
                    }
                    else if((zatwierdz && (zatwierdz_col==column)) && odrzuc){
                        odrzuc=false;
                        tabmodel.removeTableModelListener(this);
                        tabmodel.setValueAt(false, row, odrzuc_col);
                        tabmodel.addTableModelListener(this);
                    }
                    try {

                        PreparedStatement pstmt = DBConn.getConnection().prepareStatement("UPDATE Zwolnienia SET zatwierdzone=? , odrzucone=? " +
                                                                                          "WHERE id_zwolnienia=?");
                        pstmt.setBoolean(1, zatwierdz);
                        pstmt.setBoolean(2, odrzuc);
                        pstmt.setInt(3, id);
                        
                        pstmt.execute();
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });

            leaveTable.setModel(tabmodel);
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);//GEN-LAST:event_leaveYearComboBoxActionPerformed

        }
}

/**
 * Function show JasperReport about salary Statistics
 * @param evt - Action Event not used
 */
private void showSalaryStatistcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSalaryStatistcsActionPerformed
    try {

        HashMap params = new HashMap(1);
        JasperReport jrep = JasperCompileManager.compileReport("./jasperRaports/avgSalary.jrxml");
        JasperPrint jasperprint = JasperFillManager.fillReport(jrep, params, DBConn.getConnection());
        JasperViewer jv = new JasperViewer(jasperprint, false);
        jv.setVisible(true);
    } catch (JRException ex) {
        Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_showSalaryStatistcsActionPerformed

/**
 * Funkcja wy≈õwietla raport o pracownikach.
 * @param evt
 */
private void showWorkersListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showWorkersListActionPerformed
    try {

        HashMap params = new HashMap(1);
        JasperReport jrep = JasperCompileManager.compileReport("./jasperRaports/pracownicy.jrxml");
        JasperPrint jasperprint = JasperFillManager.fillReport(jrep, params, DBConn.getConnection());
        JasperViewer jv = new JasperViewer(jasperprint, false);
        jv.setVisible(true);
    } catch (JRException ex) {
        Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_showWorkersListActionPerformed


/**
 * Akcja wywo≈Çana gdy u≈ºytkownik wpisze premiƒô dla pracownika
 * @param evt
 */
private void bonusTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bonusTextFieldActionPerformed
    updateSalaryWindow();
}//GEN-LAST:event_bonusTextFieldActionPerformed


/**
 * U≈ºytkownik kliknƒÖ≈Ç przycisk Dodaj, w zak≈Çedce salaryRatePanel
 * zostanie dodany nowy typ zwolnienia.
 * @param evt
 */
private void addLeaveTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLeaveTypeButtonActionPerformed
        String doubleValue;
        java.util.regex.Matcher m;
        java.util.regex.Pattern p =java.util.regex.Pattern.compile("\\d{1,5}[\\.\\d]\\d{0,5}");

        Border red=new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 1, true);
        Border black=new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true);


        boolean fail=false;//czy jakie≈õ pole b≈Çƒôdne?


        doubleValue = leaveTypeMultiplierTextField.getText();
        if (doubleValue.equals("")) doubleValue = "0.0";
        m = p.matcher(doubleValue);

        if (!m.matches()) {
            leaveTypeMultiplierTextField.setBorder(red);
            fail=true;
        }
        else leaveTypeMultiplierTextField.setBorder(black);
        if (fail) return;
        try {
            Statement stmt =DBConn.getConnection().createStatement();
            ResultSet rs=stmt.executeQuery("SELECT MAX(id_typu) FROM Typy_zwolnien");
            
            if (rs.next()){
            PreparedStatement pstmt = DBConn.getConnection().prepareStatement(
                    "INSERT INTO Typy_zwolnien (id_typu,nazwa_zwolnienia, mnoznik) values(?,?,?)");
            
            if (leaveTypeNameTextField.getText().length()>30) return; //zad≈Çugi
            pstmt.setInt(1, rs.getInt(1)+1);
            pstmt.setString(2,leaveTypeNameTextField.getText());
            pstmt.setDouble(3,Double.parseDouble(leaveTypeMultiplierTextField.getText()));
            pstmt.execute();
            
            DefaultTableModel tabmodel=(DefaultTableModel)leaveTypeTable.getModel();
            Object []obj=new Object[3];
            obj[0]=new Integer(rs.getInt(1)+1);
            obj[1]=new String(leaveTypeNameTextField.getText());
            obj[2]=new Double(Double.parseDouble(leaveTypeMultiplierTextField.getText()));
            tabmodel.addRow(obj);
            }

                    
            
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_addLeaveTypeButtonActionPerformed

/**
 * Wybrano jednƒÖ z opcji z radiobutton√≥w w oknie workerPanel->freeTimeWorkerPanel
 * Zostanie wy≈õwietlony ten sprzƒôt wolny.
 */
private void freeDevicesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeDevicesRadioButtonActionPerformed
        try {
            PreparedStatement pstmt = DBConn.getConnection().prepareStatement("" +
                    "SELECT s.id_sprzetu, s.opis, s.cena, w.id_pracownika " + 
                    "FROM Sprzet s LEFT OUTER  JOIN wypozyczyl w USING(id_sprzetu) " +
                    "WHERE (id_pracownika IS NULL) AND (dezaktywowany='N')");
            ResultSet rs = pstmt.executeQuery();
            DefaultTableModel datamodel = (DefaultTableModel) deviceAllocationTable.getModel();
            //skasuj stare dane
            while (datamodel.getRowCount() >0 )
                   datamodel.removeRow(0);
            
            while (rs.next()) {
                Object[] obj = new Object[4];
                obj[0] = rs.getInt(1);
                obj[1] = rs.getString(2);
                obj[2] = rs.getDouble(3);
                obj[3] = false; //bo wszystkie i tak sƒÖ nie przydzielone
                datamodel.addRow(obj);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_freeDevicesRadioButtonActionPerformed

/**
 * Wybrano jednƒÖ z opcji z radiobutton√≥w w oknie workerPanel->freeTimeWorkerPanel
 * Zostanie wy≈õwietlony ten sprzƒôt przydzielony uzytkownikowi.
 */
private void ownedDevicesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ownedDevicesRadioButtonActionPerformed
        try {
            PreparedStatement pstmt = DBConn.getConnection().prepareStatement(
                    "SELECT s.id_sprzetu, s.opis, s.cena, w.id_pracownika " +
                    "FROM Sprzet s LEFT OUTER  JOIN wypozyczyl w USING(id_sprzetu) " +
                    "WHERE id_pracownika=?");
            pstmt.setInt(1, usr.getId());
            ResultSet rs = pstmt.executeQuery();
            DefaultTableModel datamodel = (DefaultTableModel) deviceAllocationTable.getModel();
            //skasuj stare dane
            while (datamodel.getRowCount() >0 )
                   datamodel.removeRow(0);
            
            while (rs.next()) {
                Object[] obj = new Object[4];
                obj[0] = rs.getInt(1);
                obj[1] = rs.getString(2);
                obj[2] = rs.getDouble(3);
                obj[3] = true; //bo wszystkie i tak sƒÖ nie przydzielone
                datamodel.addRow(obj);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_ownedDevicesRadioButtonActionPerformed

/**
 * Wybrano jednƒÖ z opcji z radiobutton√≥w w oknie workerPanel->freeTimeWorkerPanel
 * Zostanie wy≈õwietlony ten sprzƒôt wolny.
 */
private void allocDevicesTableRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allocDevicesTableRadioButtonActionPerformed

            try {
            PreparedStatement pstmt = DBConn.getConnection().prepareStatement(
                            "SELECT s.id_sprzetu, s.opis, s.cena, w.id_pracownika is null " +
                            "FROM Sprzet s LEFT OUTER  JOIN wypozyczyl w USING(id_sprzetu) " +
                             "WHERE (id_pracownika=? OR id_pracownika is NULL) AND (dezaktywowany='N')");
            pstmt.setInt(1, usr.getId());
            ResultSet rs = pstmt.executeQuery();
            DefaultTableModel datamodel = (DefaultTableModel) deviceAllocationTable.getModel();
            //skasuj stare dane
            while (datamodel.getRowCount() >0 )
                   datamodel.removeRow(0);
            
            while (rs.next()) {
                Object[] obj = new Object[4];
                obj[0] = rs.getInt(1);
                obj[1] = rs.getString(2);
                obj[2] = rs.getDouble(3);
                obj[3] = !rs.getBoolean(4); //bo wszystkie i tak sƒÖ nie przydzielone
                datamodel.addRow(obj);
            }
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_allocDevicesTableRadioButtonActionPerformed

/**
 * Wybrano jednƒÖ z opcji z radiobutton√≥w w oknie workerPanel->freeTimeWorkerPanel
 * Zostanie wy≈õwietlony ka≈ºdy sprzƒôt.
 */
private void setNextShiftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setNextShiftButtonActionPerformed
     
    //ustaw aktualnemu pracownikowi pole id_nast_zmiany na tƒô ustawiona w availableShiftsComboBox
    if (availableShiftsComboBox.getItemCount() <= 0) {
        return;
    }
    try {
        Integer id_nast_zmiany = (Integer) availableShiftsComboBox.getSelectedItem();
        PreparedStatement pstmt = DBConn.getConnection().prepareStatement(
                "UPDATE Pracownik SET id_nast_zmiany=? where id_pracownika=?");
        pstmt.setInt(1, id_nast_zmiany);
        pstmt.setInt(2, usr.getId());
        pstmt.execute();

    } catch (SQLException ex) {
        Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_setNextShiftButtonActionPerformed

/**
 * Zdarzenie wywo≈Çane po naci≈õniƒôciu przycisku kopiuj w panelu SchedulePanel
 * Kopiuje Grafik z wy≈õwietlanej zmiany, na tƒÖ wybranƒÖ w comboboxach
 * @param evt
 */
private void coppyShiftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coppyShiftButtonActionPerformed
//do zmiany editShiftSchedule.shiftCombobox przepisz grafik z 
//editShiftSchedule.monthCombobox-editShiftSchedule.yearcombobox do 
// editMonthComboBox-edityearCombobox
    Integer month1=0;//
    Integer year1=0;// MiesiƒÖc i rok z kt√≥rego kopiujemy.
    
    Integer month2=0;//
    Integer year2=0; // MiesiƒÖc i rok, do kt√≥rego kopiujemy grafik
    for (int i=0;i<Schedule.monthNames.length ;i++)
        if (Schedule.monthNames[i].equals(editShiftSchedule.monthComboBox.getSelectedItem().toString()))
                month1=i+1;
    //year1=(Integer)editYearComboBox.getSelectedItem();
    year1=(Integer)editShiftSchedule.yearComboBox.getSelectedItem();
    
    for (int i=0;i<Schedule.monthNames.length ;i++)
        if (Schedule.monthNames[i].equals(editMonthComboBox.getSelectedItem().toString()))
                month2=i+1;
    
    year2=(Integer)editYearComboBox.getSelectedItem();
    
    Integer shiftFrom=0;
    Integer shiftTo= 0;
    
    Integer divInMonth=year2*12+month2-year1*12-month1;
    
    shiftFrom=(Integer)editShiftSchedule.shiftComboBox.getSelectedItem();
    Object obj=editShiftComboBox.getSelectedItem();
    Connection conn=DBConn.getConnection();
    if (obj instanceof String) {//czyli mamy stworzyƒá nowƒÖ zmianƒô
        //stw√≥rz nowƒÖ zmianƒô
        PreparedStatement stmt;
        ResultSet rs;
            try {
                stmt =conn.prepareStatement("SELECT MAX(id_zmiany) FROM Zmiana");
                rs=stmt.executeQuery();
                
                if(rs.next()){
                    shiftTo=rs.getInt(1)+1;
                    //dodaj nowƒÖ zmianƒô
                    stmt=conn.prepareStatement("INSERT into Zmiana (id_zmiany,data_od) values (?,?)");
                    stmt.setInt(1, shiftTo);
                    stmt.setDate(2,new java.sql.Date(year2, month2, 1));
                    
                    stmt.execute();
                }
            } catch (SQLException ex) {
                Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    else shiftTo=(Integer)obj;
        try {

            PreparedStatement pstmt = conn.prepareStatement(
                    "INSERT into Grafik (id_zmiany, dzien_od, dzien_do) ( " +
                    "SELECT ?, TIMESTAMPADD(MONTH,?,dzien_od) as dzien_od2,TIMESTAMPADD(MONTH,?,dzien_do) as dzien_do2 " + 
                    "FROM Grafik WHERE id_zmiany=? AND MONTH(dzien_od)= ? AND YEAR(dzien_do)=?" +
                    ")");
            pstmt.setInt(1, shiftTo);
            pstmt.setInt(2, divInMonth);
            pstmt.setInt(3, divInMonth);
            pstmt.setInt(4, shiftFrom);
            pstmt.setInt(5, month1);
            pstmt.setInt(6, year1);
            
            pstmt.execute();
            //dodaj do kombobox√≥w nowo powsta≈ÇƒÖ zmianƒô.
            editShiftComboBox.addItem(shiftTo);
            editShiftSchedule.shiftComboBox.addItem(shiftTo);
            
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    setEditShiftComboBox();
}//GEN-LAST:event_coppyShiftButtonActionPerformed

/**
 * Po naci≈õniƒôciu przycisku Usu≈Ñ w zak≈Çadce SchedulePanel
 * powoduje usuniƒôcie wy≈õwietlanego grafiku
 * @param evt
 */
private void deleteShiftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteShiftButtonActionPerformed
//usu≈Ñ wy≈õwietlany grafik z tabeli.
    Integer month1=0;//
    Integer year1=0;// MiesiƒÖc i rok z kt√≥rego usuwamy.
    
    for (int i=0;i<Schedule.monthNames.length ;i++)
        if (Schedule.monthNames[i].equals(editShiftSchedule.monthComboBox.getSelectedItem().toString()))
                month1=i+1;
    year1=(Integer)editShiftSchedule.yearComboBox.getSelectedItem();
    
    
    Integer shiftFrom=(Integer)editShiftSchedule.shiftComboBox.getSelectedItem();
        try {

            PreparedStatement pstmt = DBConn.getConnection().prepareStatement(
                    "DELETE FROM Grafik WHERE id_zmiany=? AND MONTH(dzien_od)=? AND YEAR(dzien_od)=?");
            
            pstmt.setInt(1, shiftFrom);
            pstmt.setInt(2, month1);
            pstmt.setInt(3, year1);
            
            pstmt.execute();
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

}//GEN-LAST:event_deleteShiftButtonActionPerformed

/**
 * Ustawia comboboxa z numerami zmian
 */
private void setEditShiftComboBox(){
        try {
            Statement stmt = DBConn.getConnection().createStatement();
            ResultSet rs=stmt.executeQuery("SELECT DISTINCT id_zmiany FROM Zmiana");
            
            editShiftComboBox.removeAllItems();
            while(rs.next())
                editShiftComboBox.addItem(rs.getInt(1));
            
            editShiftComboBox.addItem(new String("Nowa"));
            
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}

/**
 * Zmienia czas w sekundach na stringa
 */
private String longToTimePeriod(long time){
    String czas=new String("");
    long temp=time/3600;
    czas=Long.toString(temp) + "h:";
    time%=3600;
    temp=time/60;
    czas+=Long.toString(temp)+"m:";
    time%=60;
    temp=time/60;
    czas+=Long.toString(temp)+"s";
    return czas;
}

/**
 * Aktualizuje dane wy≈õwietlane w zak≈Çadce workerPanel->salaryWorkerPanel, takie jak:
 * ilo≈õƒá przepracowanych godzin, sp√≥≈∫nie≈Ñ, nadgodzin
 */
private void updateSalaryWindow(){
            
    //obliczenie nale≈ºnej wyp≈Çaty
    try {
        int workerId=usr.getId();//tutaj wstaw id pracownik
        int shiftId=usr.getShiftId();
        int month=monthComboBox.getSelectedIndex()+1;
        int year=(Integer)yearComboBox.getSelectedItem();
       

        
            Connection conn = DBConn.getConnection();
//oblicz czas przepracowany w dni zwyk≈Çe i weekendy
            PreparedStatement  stmt = conn.prepareStatement(
                    "SELECT TIME_TO_SEC(godz_wy)-TIME_TO_SEC(godz_we), DAYOFWEEK(godz_wy), DAYOFWEEK(godz_we) FROM Przyjscie_Wyjscie " +
                    "WHERE MONTH(godz_wy)=? AND YEAR(godz_wy)=? " +
                    "AND id_pracownika=?");
            
            
            stmt.setInt(1, month);//miesiƒÖce sƒÖ pokoleji wiƒôc jest dobrze
            stmt.setInt(2, year);
            stmt.setInt(3,workerId);
            
            long t_work=0;
            long t_work_weekend=0;
            ResultSet rs=stmt.executeQuery();
            while (rs.next()){
                if (rs.getInt(2)==7 || rs.getInt(2)==1 || rs.getInt(3)==7 || rs.getInt(3)==1) t_work_weekend+=rs.getLong(1);
                else t_work+=rs.getLong(1);
            }            
            
            
//oblicz czas sp√≥≈∫nie≈Ñ i wcze≈õniejszych wyj≈õƒá z pracy            
            stmt = conn.prepareStatement(
                    "SELECT sum(TIME_TO_SEC(czas_spoznienia)) FROM spoznienie " +
                    "WHERE MONTH(data_przyjscia)=? AND YEAR(data_przyjscia)=?"+
                    " AND id_pracownika=?");
            
            
            stmt.setInt(1, month);//miesiƒÖce sƒÖ pokoleji wiƒôc jest dobrze
            stmt.setInt(2, year);
            stmt.setInt(3,workerId);
            long t_spoznienia=0;
            rs=stmt.executeQuery();
            if (rs.next()){
                t_spoznienia=rs.getLong(1);
                
                if (t_spoznienia==0){
                    latesCountTextField.setText("0");
                    t_spoznienia=0;
                }
            }
            
            
            

            
            
            
//oblicz czas nadgodzin
            stmt = conn.prepareStatement("SELECT sum(TIME_TO_SEC(czas)) FROM nadgodziny " +
                                                           " WHERE MONTH(data_wyjscia)=? AND YEAR(data_wyjscia)=?"+
                                                           " AND id_pracownika=?");
            stmt.setInt(1, month);//miesiƒÖce sƒÖ pokoleji wiƒôc jest dobrze
            stmt.setInt(2,year);
            stmt.setInt(3,workerId);
            rs=stmt.executeQuery();
            overtimeCountTextField.setText("0");
            long t_overtime=0;
            if (rs.next()){
                t_overtime=rs.getLong(1);
            }
            
//oblicz czas dni√≥wek
            stmt=conn.prepareStatement(
                    "SELECT TIME_TO_SEC(g.dzien_do)-TIME_TO_SEC(g.dzien_od), DAYOFWEEK(g.dzien_od) "+
                    "FROM Grafik g JOIN Zmiana z USING (id_zmiany) " +
                    "WHERE z.id_zmiany=? AND MONTH(g.dzien_od)= ? AND YEAR(g.dzien_od)=? ");
            
            stmt.setInt(1, shiftId);
            stmt.setInt(2, month);
            stmt.setInt(3, year);
            
            rs=stmt.executeQuery();
            long t_dni=0, t_weekendy=0;
            while (rs.next()){
                if (rs.getInt(2)==7 || rs.getInt(2)==1) t_weekendy+=rs.getLong(1);
                else t_dni+=rs.getLong(1);
            }
            
            
//pobierz czas pracy w weekendy
  /*          stmt=conn.prepareStatement(
                    "SELECT sum(TIME_TO_SEC(g.dzien_do)-TIME_TO_SEC(g.dzien_od)) "+
                    "FROM Grafik g JOIN Zmiana z USING (id_zmiany) " +
                    "WHERE z.id_zmiany=? AND MONTH(g.dzien_od)= ? AND YEAR(g.dzien_od)=? "+
                    "AND (DAYOFWEEK(g.dzien_od)=1 OR DAYOFWEEK(g.dzien_od)=7) ");
            
            stmt.setInt(1, shiftId);
            stmt.setInt(2, month);
            stmt.setInt(3, year);
            
            rs=stmt.executeQuery();
            
            if (rs.next())
                t_weekendy=rs.getLong(1);*/
            
            
            
//obliczenie naleznej kwoty za zwolnienia
            //zapytanie zwroci dni pracy z grafiku, ktore sie nakladaja ze zwolnieniami.
            stmt=conn.prepareStatement(
    "SELECT t.mnoznik, z.zwolnienie_od, z.zwolnienie_do , g.dzien_od, g.dzien_do, " +
                    "DAYOFWEEK(g.dzien_od), DAYOFWEEK(g.dzien_do), MONTH(g.dzien_od),MONTH(g.dzien_do) " +
                    "FROM Zwolnienia z JOIN Typy_zwolnien t USING(id_typu) JOIN Grafik g " +
                    "WHERE z.id_pracownika=? AND g.id_zmiany=? " +
                    "AND MONTH(z.zwolnienie_od)=? AND YEAR(z.zwolnienie_od)=? AND z.zatwierdzone=1 " +
                    "AND MONTH(g.dzien_od)=? AND YEAR(g.dzien_od)=? AND " +
                    "( " +
                    "( ( DATE(g.dzien_od) >= DATE(z.zwolnienie_od) ) AND ( DATE(g.dzien_do) <= DATE(z.zwolnienie_do) ) ) " +
                    "OR " +
                    "( ( DATE(g.dzien_do) >= DATE(z.zwolnienie_od) ) AND ( DATE(g.dzien_do) <= DATE(z.zwolnienie_do) ) )  " +
                    "OR " +
                    "( ( DATE(g.dzien_od) <= DATE(z.zwolnienie_od) ) AND ( DATE(g.dzien_do) >= DATE(z.zwolnienie_do) ) ) " +
                    ") " +
                    "GROUP BY 4, 5");
            

            stmt.setInt(1, workerId);
            stmt.setInt(2,shiftId);
            stmt.setInt(3,month);
            stmt.setInt(4,year);
            stmt.setInt(5,month);
            stmt.setInt(6,year);
            
            rs=stmt.executeQuery();
            
            Timestamp g1=null, g2=null, z1=null,z2=null;
            Double mnoznik=0.0;
            int w1=0, w2=0;
            int m1=0,m2=0;
            long leaveTime=0;
            
            while (rs.next()){
                mnoznik=rs.getDouble(1);
                z1=rs.getTimestamp(2);
                z2=rs.getTimestamp(3);
                g1=rs.getTimestamp(4);
                g2=rs.getTimestamp(5);
                w1=rs.getInt(6);
                w2=rs.getInt(7);
                m1=rs.getInt(8);
                m2=rs.getInt(9);
                //ponizsze 2 ify po to by nie zliczac calych grafikow na pograniczu 2 miesiecy
                Calendar cal=Calendar.getInstance();
                Calendar cal2=Calendar.getInstance();
                cal.setTimeInMillis(g1.getTime());
                cal2.setTimeInMillis(g2.getTime());
   /*             if(m2==month){
                    if (m1!=month){
                        cal.set(Calendar.YEAR,year);                    
                        cal.set(Calendar.MONTH,month);                      
                        cal.set(Calendar.DATE,1);                     
                        cal.set(Calendar.HOUR_OF_DAY,0);                
                        cal.set(Calendar.MINUTE,0);                        
                        cal.set(Calendar.SECOND,0);        
                    }
                }
                else if (m2!=month){
                    cal2.set(Calendar.YEAR, year);
                    cal2.set(Calendar.MONTH, month);
                    cal2.set(Calendar.DATE, cal2.getActualMaximum(Calendar.DATE));
                    cal2.set(Calendar.HOUR_OF_DAY, 23);
                    cal2.set(Calendar.MINUTE, 59);
                    cal2.set(Calendar.SECOND, 59);
                }
                                
                long t=0;
                if (g1.after(z1) || g1.equals(z1)){
                    if (g2.before(z2)) t=g2.getTime()-g1.getTime();
                    else t=z2.getTime()-g1.getTime();
                }
                else if(g1.before(z1) || g1.equals(g1)){
                    if(g2.before(z2)) t=g2.getTime()-z1.getTime();
                    else t=z2.getTime() -z1.getTime();
                }
                else {
                    String message="Blad z datami: zwolnienie_od =";
                    message+=z1;
                    message+=" zwolnienie_do =";
                    message+=z2;
                    message+=" zgrafik_od =";
                    message+=g1;
                    message+=" grafik_do =";
                    message+=g2;
                    throw new NullPointerException(message);
                }
                
                //if ((w1==1) || (w1==7)) t_weekendy.setTime(t_weekendy.getTime()-t/2);
                //if ((w2==1) || (w2==7)) t_weekendy.setTime(t_weekendy.getTime()-t/2);    
                if ((w1==1) || (w1==7)) t_weekendy-=t/2000;
                else t_dni-=t/2000;
                if ((w2==1) || (w2==7)) t_weekendy-=t/2000;
                else t_dni-=t/2000;
    */
                long temp=(g2.getTime()-g1.getTime())/1000;
                if ((w1==7) || (w1==1)) t_weekendy-=temp;
                else t_dni-=temp;
                
                leaveTime+=(long)(double)temp*mnoznik;
                
                
            }
           
            long t1=t_work + t_work_weekend + t_spoznienia -t_overtime;
            t1=t_dni+t_weekendy -t1;
            t_spoznienia+=t1;
            //w t1 ilo≈õƒá godzin nie przepracowanych wg grafiku, dodajemy je do sp√≥≈∫nie≈Ñ
            

              weekendsCountTextField.setText(longToTimePeriod(t_work_weekend));// moglo ulec zmianie
              leaveTimeTextField.setText(longToTimePeriod(leaveTime));
              hoursCountTextField.setText(longToTimePeriod(t_work));
              latesCountTextField.setText(longToTimePeriod(t_spoznienia));
              overtimeCountTextField.setText(longToTimePeriod(t_overtime));
            
            
            //obliczenie nale≈ºnej wyp≈Çaty
            
            Double d, pensja=0.0;
            d=Double.parseDouble(salaryDayTextField.getText());
            pensja+=d*(((double)t_work)/3600.0);
            
            d=Double.parseDouble(salaryWeekendTextField.getText());
            pensja+=d*(((double)(t_work_weekend))/3600.0);
            
            d=Double.parseDouble(salaryOvertimeTextField.getText());
            pensja+=d*((double)(t_overtime)/3600.0);
            
            d=Double.parseDouble(salaryLatesTextField.getText());
            pensja+=d*((double)(t_spoznienia)/3600.0);
            
            d=Double.parseDouble(salaryDayTextField.getText());//mnoz jako za dzienna, czas byl mnozony razy mnoznik
            pensja+=d*((double)(leaveTime)/3600.0);
            
            String premia=bonusTextField.getText();
            if (premia.equals("")) premia="0";
            java.util.regex.Pattern p =java.util.regex.Pattern.compile("\\d{1,7}[\\.\\d]\\d{0,7}");
            java.util.regex.Matcher m=p.matcher(premia);
            if (!m.matches()) {
                premia="0";
                bonusTextField.setText("0");
            }
            //pensja+=Double.parseDouble(bonusTextField.getText());

                    
            sumTextField.setText(String.format("%.10g",pensja));
            
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                    new PersonnelFrame().setVisible(true);
            }
        });
    }
    
/**
 * Funkcja inicjalizuje panel ze Stawkami
 */    
    private void initRatePanel(){
        try {
            
            //wype≈Çnienie tabeli
            Connection conn = DBConn.getConnection();
            if (conn == null) {
                return;
            }
            java.sql.Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT id_stawki, nazwa, dzienna, nadgodziny, weekendy, spoznienia FROM Stawka");
            DefaultTableModel tabmodel=new DefaultTableModel(){

                @Override
                public boolean isCellEditable(int row, int column) {
                    if (getColumnName(column).equals("ID_STAWKI")) return false;
                    else 
                        return true;
                }

                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    return getValueAt(0,columnIndex).getClass();
                }
            };
            
            //wypelnij tabelƒô danymi
            tabmodel.setColumnIdentifiers(new String[]{"ID_STAWKI","NAZWA","DZIENNA","NADGODZINY","WEEKENDY","SPOZNIENIA"});
            while (rs.next()){
               Object[] obj=new Object[6];
               obj[0]=rs.getInt(1);
               
               if (rs.getString(2)==null) obj[1]=new String("NULL");
               else obj[1]=rs.getString(2);
               obj[2]=rs.getDouble(3);
               obj[3]=rs.getDouble(4);
               obj[4]=rs.getDouble(5);
               obj[5]=rs.getDouble(6);
               tabmodel.addRow(obj);
            }
            
            
            
           
            
            ratesTable.setModel(tabmodel);
            //ustawienie Listenera dla updajtujƒÖcych dane przy zmianie tabeli
            tabmodel.addTableModelListener(new TableModelListener() {

                public void tableChanged(TableModelEvent e) {
                    int row = e.getFirstRow();
                        int column = e.getColumn();
                        TableModel model = (TableModel)e.getSource();
                        String columnName = model.getColumnName(column);
                        Connection conn=DBConn.getConnection();
                        if (conn==null) return;
                     try {
                        String sqlQuery="UPDATE Stawka SET ";
                        java.sql.PreparedStatement pstmt;
                        if (columnName.equals("NAZWA")){
                            sqlQuery+="nazwa= ?  WHERE id_stawki= ?";
                            pstmt = conn.prepareStatement(sqlQuery);
                            pstmt.setString(1, (String)model.getValueAt(row, column));
                            pstmt.setInt(2, (Integer)model.getValueAt(row, 0));
                            pstmt.execute();
                            return;
                            
                        }
                        else if (columnName.equals("DZIENNA")){
                            sqlQuery+="dzienna= ?";
                        }
                        else if (columnName.equals("NADGODZINY")){
                            sqlQuery+="nadgodziny= ?";
                        }
                        else if (columnName.equals("WEEKENDY")){
                            sqlQuery+="weekendy= ?";
                        }
                        else if (columnName.equals("SPOZNIENIA")){
                            sqlQuery+="spoznienia= ?";
                        }
                        else return;
                        sqlQuery+=" WHERE id_stawki= ?";
                        pstmt = conn.prepareStatement(sqlQuery);
                        pstmt.setDouble(1, (Double)model.getValueAt(row, column));
                        pstmt.setInt(2, (Integer)model.getValueAt(row, 0));
                        pstmt.execute();
                    } catch (SQLException ex) {
                        Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            
            ListSelectionModel ls=ratesTable.getSelectionModel();
            ls.addListSelectionListener(new ListSelectionListener() {

                public void valueChanged(ListSelectionEvent e) {
                    if (e.getValueIsAdjusting()) return;
                    ListSelectionModel lsm=(ListSelectionModel)e.getSource();
                    if (lsm.isSelectionEmpty()) {
                        rateNameTextField.setText("");
                        dayRateTextField.setText("");
                        weekendsTextField.setText("");
                        overtimeTextField.setText("");
                        latesTextField.setText("");
                    }
                    else{
                        int i=lsm.getMinSelectionIndex();
                        rateNameTextField.setText(ratesTable.getValueAt(i, 1).toString());
                        dayRateTextField.setText(ratesTable.getValueAt(i, 2).toString());
                        overtimeTextField.setText(ratesTable.getValueAt(i, 3).toString());
                        weekendsTextField.setText(ratesTable.getValueAt(i, 4).toString());
                        latesTextField.setText(ratesTable.getValueAt(i, 5).toString());
                    }
                }
            });
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }

/**
 * Funkcja inicjalizuje panel z wyp≈ÇatƒÖ pracownika
 */
    private void initSalaryPanel(){
        try {
            Connection conn = DBConn.getConnection();
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT nazwa FROM Stawka");
            
            while(rs.next()){
                rateComboBox.addItem(rs.getString(1));
            }
            
            rs=stmt.executeQuery("SELECT nazwa, dzienna, nadgodziny, weekendy, spoznienia FROM Stawka"+
                                 " WHERE id_stawki="+usr.getIdStawki().toString());
            
            if(rs.next()){
                String nazwa=rs.getString(1);
                for (int i=0;i<rateComboBox.getItemCount();i++){
                    if(nazwa.equals(rateComboBox.getItemAt(i))) {
                            rateComboBox.setSelectedIndex(i);
                            oldRateName=nazwa;
                            break;
                    }
                }
                salaryDayTextField.setText(Double.toString(rs.getDouble(2)));
                salaryOvertimeTextField.setText(Double.toString(rs.getDouble(3)));
                salaryWeekendTextField.setText(Double.toString(rs.getDouble(4)));
                salaryLatesTextField.setText(Double.toString(rs.getDouble(5)));
                
            }
            
            
            //ustawienie combobox√≥w z miesiƒÖcem i rokiem
            Calendar cal =Calendar.getInstance();
            for(String m: Schedule.monthNames)
                monthComboBox.addItem(m);
            
            monthComboBox.setSelectedIndex(cal.get(Calendar.MONTH));
            
            yearComboBox.addItem(new Integer(cal.get(Calendar.YEAR)-1));
            yearComboBox.addItem(new Integer(cal.get(Calendar.YEAR)));
            yearComboBox.addItem(new Integer(cal.get(Calendar.YEAR)+1));
            initialization=false;
            yearComboBox.setSelectedIndex(1);
            wasRateLabel.setText("");
            wasRateValueLabel.setText("");
            
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.getMessage());
        }
        catch(Exception ex){
            System.out.println("InitSalary Panel" + ex.getMessage() + "≈πr√≥d≈Ço:" + ex.getCause());
        }
        
    }
/**
 * Funkcja inicjalizuje panel o zwolnieniach(urlopach) pracownika
 */
    private void initWorkerLeavePanel(int workerId){
        try {
            //wype≈Çnienie tabeli
            Connection conn = DBConn.getConnection();
            if (conn == null) return;
            
            PreparedStatement  pstmt = conn.prepareStatement("SELECT YEAR(zwolnienie_od) " +
                    "FROM Zwolnienia " +
                    "WHERE id_pracownika=? " +
                    "GROUP BY 1 " +
                    "ORDER BY 1 DESC");
            pstmt.setInt(1,workerId);
            ResultSet rs = pstmt.executeQuery();
            leaveYearComboBox.removeAllItems();
            while (rs.next())
                leaveYearComboBox.addItem(new Integer(rs.getInt(1)));
            
            if (leaveYearComboBox.getItemCount()==0){
                Integer year=Calendar.getInstance().get(Calendar.YEAR);
                leaveYearComboBox.addItem(year);
            }
            //funkcja wype≈Çni tablicƒô nowymi warto≈õciami
            leaveYearComboBoxActionPerformed(null);
                    
            
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            

    }
/**
 * Funkcja inicjalizuje panel o pracownikach 
 */
    private void initWorkerDevicesPanel(int workerId){
        DefaultTableModel tabmodel=(DefaultTableModel)deviceAllocationTable.getModel();
        tabmodel.addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column = e.getColumn();
                if ((row<0 || column <0)) return;
                TableModel model = (TableModel)e.getSource();
                PreparedStatement pstmt;
                Boolean action=(Boolean)model.getValueAt(row, column);
                try {
                    if (action) 
                        pstmt = DBConn.getConnection().prepareStatement("INSERT INTO wypozyczyl (id_pracownika, id_sprzetu) values(?,?)");
                    else 
                        pstmt = DBConn.getConnection().prepareStatement("DELETE FROM wypozyczyl WHERE id_pracownika=? AND id_sprzetu=?");
                    
                    pstmt.setInt(1, usr.getId());
                    pstmt.setInt(2,(Integer)model.getValueAt(row, 0));
                    pstmt.execute();
                } catch (SQLException ex) {
                        Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
/**
 * Funkcja inicjalizuje panel z harmonogramem pracownika
 */
    private void initWorkerSchedulePanel(int workerId,int shiftId){
        //schowanie okna wyboru miesiƒÖca bo i tak potrzebny nam jest aktualny.
        shiftSchedule1.monthComboBox.setEnabled(false);
        shiftSchedule1.yearComboBox.setEnabled(false);
        
        shiftSchedule1.addShiftID(shiftId);
        shiftSchedule1.setWorkerId(workerId);
        shiftSchedule1.setGrafik(true);
        shiftSchedule1.setFreeTime(true);
        shiftSchedule1.setLates(true);
        Calendar cal=Calendar.getInstance();
        shiftSchedule1.addToMonthComboBox(cal.get(Calendar.MONTH)+1);
        shiftSchedule1.addToYearComboBox(cal.get(Calendar.YEAR));
         //ustawienie availableShiftsComboBox - wype≈Çnienie dostƒôpnymi zmiananmi.
        try {
            Statement stmt = DBConn.getConnection().createStatement();
            ResultSet rs =stmt.executeQuery("SELECT id_zmiany from Zmiana");
            availableShiftsComboBox.removeAllItems();
            int i=0;
            while (rs.next()){
                availableShiftsComboBox.addItem(rs.getInt(1));
                if (rs.getInt(1)==shiftId) i=availableShiftsComboBox.getItemCount();
            }
            availableShiftsComboBox.setSelectedIndex(i-1);
        } catch (SQLException ex) {
            Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
/**
 * Funkcja inicjalizuje panel do edycji i przegladania grafik√≥w.
 */
    private void initSchedulesPanel(){
        //ustaw kolorowanie shiftIdList, tab aby po zaznaczeniu by≈Ç odpowieni kolor
        //na liscie i na harmonogramie
        DefaultTableModel tabmodel=new DefaultTableModel(){

            @Override
            public boolean isCellEditable(int row, int column) {
                return true;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return getValueAt(0, columnIndex).getClass();
            }
            
            
        };
        tabmodel.addColumn("Zmiany");
        
        TableModelListener tabl=new TableModelListener() {

            public void tableChanged(TableModelEvent e) {
                ColorIntTuple tuple;
                
                List<Integer> li=new ArrayList<Integer>(shiftIdList.getSelectedRowCount());
                List<Color> lc=new ArrayList<Color>(shiftIdList.getSelectedRowCount());
                for (int i:shiftIdList.getSelectedRows()){
                    tuple=(ColorIntTuple)shiftIdList.getValueAt(i, 0);
                    li.add(tuple.getValue());
                    lc.add(tuple.getColor());
                    allShiftsSchedule.clearSchedule();
                    allShiftsSchedule.setShiftID(li);
                    allShiftsSchedule.setShiftColor(lc);
                    allShiftsSchedule.repaintSchedule();
                }
            }
        };
        
        tabmodel.addTableModelListener(tabl);
        
        shiftIdList.setModel(tabmodel);
        
        shiftIdList.setDefaultRenderer(ColorIntTuple.class, new TableCellRenderer() {
            final JLabel jl = new JLabel("");
            final Color color = new Color(255, 0, 0);

            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                jl.setText(value.toString());
                jl.setBackground(((ColorIntTuple)value).getColor());
                jl.setHorizontalAlignment(SwingConstants.CENTER);
                if (isSelected) {
                    jl.setOpaque(true);
                } else {
                    jl.setOpaque(false);
                }
                return jl;
            }
            
        });
        
        shiftIdList.setDefaultEditor(ColorIntTuple.class,new ColorEditor());
        
        
        //dodanie obs≈Çugi wyznaczania listy zaznaczonych element√≥w.
        //wszystkie kolory i numery zmian zostajƒÖ ustawione w obiekcie harmonogramu
        ListSelectionModel lsm=shiftIdList.getSelectionModel();
        lsm.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                if(e.getValueIsAdjusting()) return;
                ColorIntTuple tuple;
                
                List<Integer> li=new ArrayList<Integer>(shiftIdList.getSelectedRowCount());
                List<Color> lc=new ArrayList<Color>(shiftIdList.getSelectedRowCount());
                for (int i:shiftIdList.getSelectedRows()){
                    tuple=(ColorIntTuple)shiftIdList.getValueAt(i, 0);
                    li.add(tuple.getValue());
                    lc.add(tuple.getColor());
                    System.out.println("ele" + li);
                    System.out.println("color" + lc);
                    allShiftsSchedule.clearSchedule();
                    allShiftsSchedule.setShiftID(li);
                    allShiftsSchedule.setShiftColor(lc);
                    allShiftsSchedule.repaintSchedule();
                }
            }
            
            
        });
        
        
        //ustaw comboboxy miesiƒÖca i roku 
        for (int i=1;i<=12; i++){
            allShiftsSchedule.addToMonthComboBox(i);
            editShiftSchedule.addToMonthComboBox(i);
        }
        
        editShiftSchedule.setGrafik(true);
        Calendar calendar =Calendar.getInstance();
        
        allShiftsSchedule.addToYearComboBox(calendar.get(Calendar.YEAR)+1);
        allShiftsSchedule.addToYearComboBox(calendar.get(Calendar.YEAR));
        allShiftsSchedule.addToYearComboBox(calendar.get(Calendar.YEAR)-1);
        
        editShiftSchedule.addToYearComboBox(calendar.get(Calendar.YEAR)-1);
        editShiftSchedule.addToYearComboBox(calendar.get(Calendar.YEAR));
        editShiftSchedule.addToYearComboBox(calendar.get(Calendar.YEAR)+1);
        
        allShiftsSchedule.setGrafik(true);
        
        ActionListener akcja=new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                //odczytanie zaznaczonego miesiƒÖca
                String monthstring=(String)allShiftsSchedule.monthComboBox.getSelectedItem();
                if (monthstring==null) return;
                
                int month=1;
                for (int i=0;i<12;i++) 
                    if (Schedule.monthNames[i].equals(monthstring)) {
                        month=i+1;
                        break;
                    }
                //odczytanie zaznaczonego roku.
                Integer year=(Integer)allShiftsSchedule.yearComboBox.getSelectedItem();
                if (year==null) return;
                
                try {
                    
                    //Wykonanie zapytania s≈Çu≈ºocego do odnalezienia nr zmian grafik√≥w w tym roku i miesiƒÖcu.
                    PreparedStatement pstmt = DBConn.getConnection().prepareStatement(
                            "SELECT DISTINCT id_zmiany from Grafik " + 
                            "WHERE MONTH(dzien_od)=? AND YEAR(dzien_od)=?");
                    
                    pstmt.setInt(1, month);
                    pstmt.setInt(2, year);
                    ResultSet rs=pstmt.executeQuery();
                    DefaultTableModel tabmodel=(DefaultTableModel)shiftIdList.getModel();
                    
                    while(tabmodel.getRowCount()>0) tabmodel.removeRow(0);
                                        
                    while (rs.next())
                        tabmodel.addRow(new Object[]{new ColorIntTuple(rs.getInt(1))});
                    
                    //ustawienie dostƒôpnych zmian
                    shiftIdList.setModel(tabmodel);
                    
                } catch (SQLException ex) {
                    Logger.getLogger(PersonnelFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        };
        allShiftsSchedule.monthComboBox.addActionListener(akcja);
        allShiftsSchedule.yearComboBox.addActionListener(akcja);
        

        //wywo≈Çanie akcji po to by wypisaƒá listƒô dostƒôpnych zmian
        allShiftsSchedule.yearComboBox.setSelectedIndex(allShiftsSchedule.yearComboBox.getSelectedIndex());
        
        //ustawienie harmonogramu s≈Çu≈ºƒÖcego de edycji
        editShiftSchedule.getCalendarDataModel().setEditable(true);
        //ustaw editMonthCombox
        for (String s: Schedule.monthNames)
            editMonthComboBox.addItem(s);
        
        //ustaw editYearComboBox
        editYearComboBox.addItem(calendar.get(Calendar.YEAR)-1);
        editYearComboBox.addItem(calendar.get(Calendar.YEAR));
        editYearComboBox.addItem(calendar.get(Calendar.YEAR)+1);
        
        setEditShiftComboBox();//wype≈Çnia editShiftComboboxa na wszystkie dostƒôpne zmiany
                               //i warto≈õƒá Nowa -oznaczajƒÖca stworzenie nowej zmiany.
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addLeaveTypeButton;
    private customComponents.ShiftSchedule allShiftsSchedule;
    private javax.swing.JRadioButton allocDevicesTableRadioButton;
    private javax.swing.JButton applyRateButton;
    private javax.swing.JButton applySalaryButton;
    private javax.swing.JComboBox availableShiftsComboBox;
    private javax.swing.JTextField bonusTextField;
    private javax.swing.JLabel changeRateLabel;
    private javax.swing.JButton coppyShiftButton;
    private javax.swing.JLabel dayRateLabel;
    private javax.swing.JTextField dayRateTextField;
    private javax.swing.JButton deleteShiftButton;
    private javax.swing.JLabel deviceAllocationLabel;
    private javax.swing.JTable deviceAllocationTable;
    private javax.swing.JPanel devicesPanel;
    private javax.swing.JComboBox editMonthComboBox;
    private javax.swing.JComboBox editShiftComboBox;
    private javax.swing.JLabel editShiftLabel;
    private customComponents.ShiftSchedule editShiftSchedule;
    private javax.swing.JComboBox editYearComboBox;
    private javax.swing.JLabel forWhatLabel;
    private javax.swing.JTextField forWhatTextField;
    private javax.swing.JLabel formonthLabel;
    private javax.swing.JRadioButton freeDevicesRadioButton;
    private javax.swing.JPanel freeTimeWorkerPanel;
    private javax.swing.JLabel hoursCountLabel;
    private javax.swing.JTextField hoursCountTextField;
    private javax.swing.JLabel isPayedLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lateCountLabel;
    private javax.swing.JTextField latesCountTextField;
    private javax.swing.JLabel latesLabel;
    private javax.swing.JTextField latesTextField;
    private javax.swing.JLabel leaveLabel;
    private javax.swing.JTable leaveTable;
    private javax.swing.JTextField leaveTimeTextField;
    private javax.swing.JLabel leaveTypeMultiplierLabel;
    private javax.swing.JTextField leaveTypeMultiplierTextField;
    private javax.swing.JLabel leaveTypeNameLabel;
    private javax.swing.JTextField leaveTypeNameTextField;
    private javax.swing.JTable leaveTypeTable;
    private javax.swing.JLabel leaveTypesLabel;
    private javax.swing.JComboBox leaveYearComboBox;
    private javax.swing.JLabel leaveYearLabel;
    private javax.swing.JComboBox monthComboBox;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel overtimeCountLabel;
    private javax.swing.JTextField overtimeCountTextField;
    private javax.swing.JLabel overtimeLabel;
    private javax.swing.JTextField overtimeTextField;
    private javax.swing.JRadioButton ownedDevicesRadioButton;
    private javax.swing.JLabel personelLabel;
    private javax.swing.JTabbedPane personellTabbedPane;
    private javax.swing.JComboBox rateComboBox;
    private javax.swing.JLabel rateLabel;
    private javax.swing.JTextField rateNameTextField;
    private javax.swing.JLabel rateTitleLabel;
    private javax.swing.JTable ratesTable;
    private javax.swing.JLabel salaryDayLabel;
    private javax.swing.JTextField salaryDayTextField;
    private javax.swing.JTextField salaryLatesTextField;
    private javax.swing.JLabel salaryOvertimeLabel;
    private javax.swing.JTextField salaryOvertimeTextField;
    private javax.swing.JPanel salaryRatePanel;
    private javax.swing.JTextField salaryWeekendTextField;
    private javax.swing.JLabel salaryWeekendsLabel;
    private javax.swing.JLabel salarylatesLabel;
    private javax.swing.JPanel schedulePanel;
    private customComponents.searchDevice searchDevice1;
    private customComponents.searchWorker searchWorker1;
    private javax.swing.JButton setNextShiftButton;
    private javax.swing.JTable shiftIdList;
    private customComponents.ShiftSchedule shiftSchedule1;
    private javax.swing.JLabel showDevicesLabel;
    private javax.swing.JButton showSalaryStatistcs;
    private javax.swing.JButton showWorkersList;
    private javax.swing.JPanel staticticsPanel;
    private javax.swing.JTabbedPane subWorkerPanel;
    private javax.swing.JLabel sumLabel;
    private javax.swing.JTextField sumTextField;
    private javax.swing.JLabel wasRateLabel;
    private javax.swing.JLabel wasRateValueLabel;
    private javax.swing.JLabel weekendsCountLabel;
    private javax.swing.JTextField weekendsCountTextField;
    private javax.swing.JLabel weekendsLabel;
    private javax.swing.JTextField weekendsTextField;
    private javax.swing.JPanel workerDevicePanel;
    private javax.swing.ButtonGroup workerDevicesbuttonGroup;
    private javax.swing.JPanel workerPanel;
    private javax.swing.JPanel workerSalaryPanel;
    private javax.swing.JPanel workerSchedulePanel;
    private javax.swing.JComboBox yearComboBox;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables
    
}
