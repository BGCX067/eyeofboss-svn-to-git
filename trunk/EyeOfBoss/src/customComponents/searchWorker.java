/*
 * searchWorker.java
 *
 * Created on 4 czerwiec 2008, 13:07
 */
package customComponents;

import com.mysql.jdbc.Statement;
import database.DBConn;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.border.Border;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  lukasz
 */
public class searchWorker extends JPanel {

    /** Creates new form BeanForm */
    public searchWorker() {
        initComponents();
        initComponent();
    }
    
    private List<ActionListener> listOfListeners =new ArrayList<ActionListener>(1);
    
    public void addActionListener(ActionListener al){
        listOfListeners.add(al);
    }

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {

            javax.swing.JFrame frm = new javax.swing.JFrame("Komponent wyszukiwania");

            public void run() {
                frm.add(new searchWorker());
                frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frm.setVisible(true);
                frm.pack();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workersTable = new javax.swing.JTable();
        nameCheckBox = new javax.swing.JCheckBox();
        nameTextField = new javax.swing.JTextField();
        surnameCheckBox = new javax.swing.JCheckBox();
        surnameTextField = new javax.swing.JTextField();
        cityCheckBox = new javax.swing.JCheckBox();
        cityTextField = new javax.swing.JTextField();
        addrCheckBox = new javax.swing.JCheckBox();
        addrTextField = new javax.swing.JTextField();
        emailCheckBox = new javax.swing.JCheckBox();
        emailTextField = new javax.swing.JTextField();
        phoneCheckBox = new javax.swing.JCheckBox();
        firstDayCheckBox = new javax.swing.JCheckBox();
        lastDayCheckBox = new javax.swing.JCheckBox();
        functionCheckBox = new javax.swing.JCheckBox();
        functionComboBox = new javax.swing.JComboBox();
        lastDayTextField = new javax.swing.JTextField();
        firstDayTextField = new javax.swing.JTextField();
        phoneTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        workerInfoLabel = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(logIn.LogIn.class).getContext().getResourceMap(searchWorker.class);
        searchTitle.setText(resourceMap.getString("searchTitle.text")); // NOI18N
        searchTitle.setName("searchTitle"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        workersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "IMIĘ", "NAZWISKO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workersTable.setName("workersTable"); // NOI18N
        workersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        workersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(workersTable);
        workersTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        workersTable.getColumnModel().getColumn(0).setMinWidth(40);
        workersTable.getColumnModel().getColumn(0).setPreferredWidth(40);
        workersTable.getColumnModel().getColumn(0).setMaxWidth(100);
        workersTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("workersTable.columnModel.title0")); // NOI18N
        workersTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("workersTable.columnModel.title1")); // NOI18N
        workersTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("workersTable.columnModel.title2")); // NOI18N

        nameCheckBox.setText(resourceMap.getString("nameCheckBox.text")); // NOI18N
        nameCheckBox.setName("nameCheckBox"); // NOI18N
        nameCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nameCheckBoxStateChanged(evt);
            }
        });

        nameTextField.setText(resourceMap.getString("nameTextField.text")); // NOI18N
        nameTextField.setEnabled(false);
        nameTextField.setName("nameTextField"); // NOI18N

        surnameCheckBox.setText(resourceMap.getString("surnameCheckBox.text")); // NOI18N
        surnameCheckBox.setName("surnameCheckBox"); // NOI18N
        surnameCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                surnameCheckBoxStateChanged(evt);
            }
        });

        surnameTextField.setText(resourceMap.getString("surnameTextField.text")); // NOI18N
        surnameTextField.setEnabled(false);
        surnameTextField.setName("surnameTextField"); // NOI18N

        cityCheckBox.setText(resourceMap.getString("cityCheckBox.text")); // NOI18N
        cityCheckBox.setName("cityCheckBox"); // NOI18N
        cityCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cityCheckBoxStateChanged(evt);
            }
        });

        cityTextField.setText(resourceMap.getString("cityTextField.text")); // NOI18N
        cityTextField.setEnabled(false);
        cityTextField.setName("cityTextField"); // NOI18N

        addrCheckBox.setText(resourceMap.getString("addrCheckBox.text")); // NOI18N
        addrCheckBox.setName("addrCheckBox"); // NOI18N
        addrCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                addrCheckBoxStateChanged(evt);
            }
        });

        addrTextField.setText(resourceMap.getString("addrTextField.text")); // NOI18N
        addrTextField.setEnabled(false);
        addrTextField.setName("addrTextField"); // NOI18N

        emailCheckBox.setText(resourceMap.getString("emailCheckBox.text")); // NOI18N
        emailCheckBox.setName("emailCheckBox"); // NOI18N
        emailCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                emailCheckBoxStateChanged(evt);
            }
        });

        emailTextField.setText(resourceMap.getString("emailTextField.text")); // NOI18N
        emailTextField.setEnabled(false);
        emailTextField.setName("emailTextField"); // NOI18N

        phoneCheckBox.setText(resourceMap.getString("phoneCheckBox.text")); // NOI18N
        phoneCheckBox.setName("phoneCheckBox"); // NOI18N
        phoneCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                phoneCheckBoxStateChanged(evt);
            }
        });

        firstDayCheckBox.setText(resourceMap.getString("firstDayCheckBox.text")); // NOI18N
        firstDayCheckBox.setName("firstDayCheckBox"); // NOI18N
        firstDayCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                firstDayCheckBoxStateChanged(evt);
            }
        });

        lastDayCheckBox.setText(resourceMap.getString("lastDayCheckBox.text")); // NOI18N
        lastDayCheckBox.setName("lastDayCheckBox"); // NOI18N
        lastDayCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lastDayCheckBoxStateChanged(evt);
            }
        });

        functionCheckBox.setText(resourceMap.getString("functionCheckBox.text")); // NOI18N
        functionCheckBox.setName("functionCheckBox"); // NOI18N
        functionCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                functionCheckBoxStateChanged(evt);
            }
        });

        functionComboBox.setEnabled(false);
        functionComboBox.setName("functionComboBox"); // NOI18N

        lastDayTextField.setText(resourceMap.getString("lastDayTextField.text")); // NOI18N
        lastDayTextField.setEnabled(false);
        lastDayTextField.setName("lastDayTextField"); // NOI18N

        firstDayTextField.setText(resourceMap.getString("firstDayTextField.text")); // NOI18N
        firstDayTextField.setEnabled(false);
        firstDayTextField.setName("firstDayTextField"); // NOI18N

        phoneTextField.setText(resourceMap.getString("phoneTextField.text")); // NOI18N
        phoneTextField.setEnabled(false);
        phoneTextField.setName("phoneTextField"); // NOI18N

        searchButton.setText(resourceMap.getString("searchButton.text")); // NOI18N
        searchButton.setName("searchButton"); // NOI18N
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        workerInfoLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        workerInfoLabel.setText(resourceMap.getString("workerInfoLabel.text")); // NOI18N
        workerInfoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        workerInfoLabel.setName("workerInfoLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchTitle)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameCheckBox)
                            .addComponent(addrCheckBox)
                            .addComponent(emailCheckBox)
                            .addComponent(cityCheckBox)
                            .addComponent(surnameCheckBox)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton)))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(surnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(phoneCheckBox)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(2, 2, 2)
                                                    .addComponent(functionCheckBox)
                                                    .addGap(91, 91, 91))
                                                .addComponent(lastDayCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
                                            .addComponent(firstDayCheckBox, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(functionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(firstDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lastDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(workerInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(searchTitle)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameCheckBox)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(addrCheckBox))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(emailCheckBox))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(cityCheckBox))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(surnameCheckBox)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(surnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(addrTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(functionCheckBox)
                                    .addComponent(functionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(phoneCheckBox)
                                    .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lastDayCheckBox)
                                    .addComponent(lastDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(firstDayCheckBox)
                                    .addComponent(firstDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(workerInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void nameCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nameCheckBoxStateChanged
    nameTextField.setEnabled(nameCheckBox.isSelected());
}//GEN-LAST:event_nameCheckBoxStateChanged

private void surnameCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_surnameCheckBoxStateChanged
    surnameTextField.setEnabled(surnameCheckBox.isSelected());
}//GEN-LAST:event_surnameCheckBoxStateChanged

private void cityCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cityCheckBoxStateChanged
    cityTextField.setEnabled(cityCheckBox.isSelected());
}//GEN-LAST:event_cityCheckBoxStateChanged

private void addrCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_addrCheckBoxStateChanged
    addrTextField.setEnabled(addrCheckBox.isSelected());
}//GEN-LAST:event_addrCheckBoxStateChanged

private void emailCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_emailCheckBoxStateChanged
    emailTextField.setEnabled(emailCheckBox.isSelected());
}//GEN-LAST:event_emailCheckBoxStateChanged

private void phoneCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_phoneCheckBoxStateChanged
    phoneTextField.setEnabled(phoneCheckBox.isSelected());
}//GEN-LAST:event_phoneCheckBoxStateChanged

private void firstDayCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_firstDayCheckBoxStateChanged
    firstDayTextField.setEnabled(firstDayCheckBox.isSelected());
}//GEN-LAST:event_firstDayCheckBoxStateChanged

private void lastDayCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lastDayCheckBoxStateChanged
    lastDayTextField.setEnabled(lastDayCheckBox.isSelected());
}//GEN-LAST:event_lastDayCheckBoxStateChanged

private void functionCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_functionCheckBoxStateChanged
    functionComboBox.setEnabled(functionCheckBox.isSelected());
}//GEN-LAST:event_functionCheckBoxStateChanged

    private void initComponent() {
        Statement stmt = null;
        ResultSet rs = null;
        try {
            stmt = (Statement) DBConn.getConnection().createStatement();
            rs = stmt.executeQuery("select opis_uprawnienia from uprawnienia");
            while (rs.next()) {
                functionComboBox.addItem(rs.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(searchWorker.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    ListSelectionModel ls=workersTable.getSelectionModel();
    ls.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) return;
                ListSelectionModel lsm=(ListSelectionModel)e.getSource();
                    if (lsm.isSelectionEmpty()) {
                        return;
                    }
                    else{
                    
                        int i=lsm.getMinSelectionIndex();
                        Integer id=(Integer)workersTable.getModel().getValueAt(i, 0);
                    try {

                        PreparedStatement pstmt = DBConn.getConnection().prepareStatement(
                                "SELECT imie, nazwisko, data_zatrudnienia, data_zwolnienia, miasto, adres, telefon, email " +
                                "FROM Pracownik where id_pracownika=?");
                        pstmt.setInt(1, id);
                        ResultSet rs=pstmt.executeQuery();
                        if (rs.next()){
                            StringBuilder workerInfo=new StringBuilder();
                            workerInfo.append("<html> ");
                            workerInfo.append(rs.getString(1));
                            workerInfo.append(" ");
                            workerInfo.append(rs.getString(2));
                            workerInfo.append("<br>");
                            workerInfo.append(rs.getString(5));
                            workerInfo.append(", ");
                            workerInfo.append(rs.getString(6));
                            workerInfo.append("<br>");
                            
                            workerInfo.append("Tel:");
                            workerInfo.append(rs.getString(7));
                            workerInfo.append(", email: ");
                            workerInfo.append(rs.getString(8));
                            
                            SimpleDateFormat sdf =new SimpleDateFormat("yyyy-MM-dd");
                            workerInfo.append("<br>Zatrudniony od:");
                            workerInfo.append(sdf.format(rs.getDate(3)));
                            java.sql.Date d=rs.getDate(4);
                            if (d!=null){
                                 workerInfo.append("<br>Zwolniony: ");
                                 workerInfo.append(sdf.format(d));
                            }
                            workerInfo.append("</html>");
                            workerInfoLabel.setText(workerInfo.toString());
                            ActionEvent evt=new ActionEvent(this, id, "WORKER_SET");
                             
                            //wyemituj zdarzenie, że zaznaczono pracownika
                            for (int n=0; n< listOfListeners.size();n++){
                                listOfListeners.get(n).actionPerformed(evt);
                            }
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(searchWorker.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    }
            }
        });
    }
    
    /*
     * Sprawdza wejście(dane wpisane przez uzytkownika).
     */
    private boolean validateInput(){
        
    Boolean areErrors = false;
    Border red = new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 1, true);
    Border green = new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 0), 1, true);
    if (nameCheckBox.isSelected()) {
        if (!Pattern.matches("[\\p{Space}a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ]*", nameTextField.getText())) {
            areErrors = true;
            nameTextField.setBorder(red);
        } else {
            nameTextField.setBorder(green);
        }
    }
    if (surnameCheckBox.isSelected()) {
        if (!Pattern.matches("[\\-a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ]*", surnameTextField.getText())) {
            areErrors = true;
            surnameTextField.setBorder(red);
        } else {
            surnameTextField.setBorder(green);
        }
    }
    if (cityCheckBox.isSelected()) {
        if (!Pattern.matches("[\\p{Space}\\-a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ]*", cityTextField.getText())) {
            areErrors = true;
            cityTextField.setBorder(red);
        } else {
            cityTextField.setText(cityTextField.getText().trim());
            cityTextField.setBorder(green);
        }
    }
    if (addrCheckBox.isSelected()) {
        if (!Pattern.matches("[\\x2F\\p{Space}\\-a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ\\.0-9\\x5C]*", addrTextField.getText())) {
            areErrors = true;
            addrTextField.setBorder(red);
        } else {
            addrTextField.setBorder(green);
        }
    }
    if (phoneCheckBox.isSelected()) {
        if (!Pattern.matches("[0-9]*", phoneTextField.getText())) {
            areErrors = true;
            phoneTextField.setBorder(red);
        } else {
            phoneTextField.setBorder(green);
        }
    }

    if (emailCheckBox.isSelected()) {
        String regexemail = "^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[_A-Za-z0-9-]+)";
        if (!Pattern.matches(regexemail, emailTextField.getText())) {
            areErrors = true;
            emailTextField.setBorder(red);
        } else {
            emailTextField.setBorder(green);
        }
    }

    if (firstDayCheckBox.isSelected()) {
        if (!Pattern.matches("[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}", firstDayTextField.getText())) {
            areErrors = true;
            firstDayTextField.setBorder(red);
        } else {
            //sprawdź jeszcze, czy miesiąc mniejszy od 1 do 12
            char tab[] = {0, 0};
            firstDayTextField.getText().getChars(5, 7, tab, 0);

            String s = new String(tab);
            Integer i = Integer.parseInt(s);
            firstDayTextField.getText().getChars(8, 10, tab, 0);
            s = new String(tab);
            Integer d = Integer.parseInt(s);
            if ((i < 1) || (i > 12) || (d < 1) || (d > 31)) {
                areErrors = true;
                firstDayTextField.setBorder(red);
            } else {
                firstDayTextField.setBorder(green);
            }
        }
    }
    if (lastDayCheckBox.isSelected()) {
        if (!Pattern.matches("[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}", lastDayTextField.getText())) {
            areErrors = true;
            lastDayTextField.setBorder(red);
        } else {
            //sprawdź jeszcze, czy miesiąc mniejszy od 1 do 12
            char tab[] = {0, 0};
            lastDayTextField.getText().getChars(5, 7, tab, 0);

            String s = new String(tab);
            Integer i = Integer.parseInt(s);
            lastDayTextField.getText().getChars(8, 10, tab, 0);
            s = new String(tab);
            Integer d = Integer.parseInt(s);
            if ((i < 1) || (i > 12) || (d < 1) || (d > 31)) {
                areErrors = true;
                lastDayTextField.setBorder(red);
            } else {
                lastDayTextField.setBorder(green);
            }
        }
    }
    return !areErrors;
    }

public void checkAll(){
    nameCheckBox.setSelected(true);
    surnameCheckBox.setSelected(true);
    cityCheckBox.setSelected(true);
    addrCheckBox.setSelected(true);
    emailCheckBox.setSelected(true);
    phoneCheckBox.setSelected(true);
    firstDayCheckBox.setSelected(true);
    lastDayCheckBox.setSelected(true);
    functionCheckBox.setSelected(true);
}
    /**
     * Po naciśnięciu szukaj, ozpocznij wyszukanie pracowników.
     * @param evt
     */
private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
//najpierw walidacja danych wejściowych


//koniec sprawdzania, jeśli są błędy to wyjdź
    if (!validateInput()) return;//konstrukcja zapytania
    
//SELECT * from Pracownik JOIN uzytkownik USING(id_pracownika) JOIN uprawnienia USING(id_uprawnienia)
//WHERE id_pracownika=0 AND uprawnienie <5 ...
//odebranie wyników zapytania i ich wyświetlenie
//wsyłanie zdarzenia o zaznaczeniu użytkownika, ale to gdzie indziej
    
    Connection conn = DBConn.getConnection();
    StringBuilder sql = new StringBuilder(200);
    StringBuilder condition = new StringBuilder(200);
    int paramtersNum = 0;
    sql.append("SELECT imie, nazwisko, id_pracownika FROM Pracownik ");

    if (functionCheckBox.isSelected()) {
        sql.append(
                " JOIN uzytkownik USING(id_pracownika)" +
                " JOIN uprawnienia USING(id_uprawnienia) ");
    }

    sql.append(" WHERE 1");

    if (nameCheckBox.isSelected()) {
        condition.append(" AND (imie LIKE ? ) ");
        paramtersNum++;
    }
    if (surnameCheckBox.isSelected()) {
        condition.append(" AND (nazwisko LIKE ? ) ");
        paramtersNum++;
    }
    if (cityCheckBox.isSelected()) {
        condition.append(" AND (miasto LIKE ? ) ");
        paramtersNum++;
    }
    if (addrCheckBox.isSelected()) {
        condition.append(" AND (adres LIKE ? ) ");
        paramtersNum++;
    }
    if (emailCheckBox.isSelected()) {
        condition.append(" AND (email = ? ) ");
        paramtersNum++;
    }
    if (phoneCheckBox.isSelected()) {
        condition.append(" AND (telefon=? ) ");
        paramtersNum++;
    }
    if (firstDayCheckBox.isSelected()) {
        condition.append(" AND (data_zatrudnienia > ? ) ");
        paramtersNum++;
    }
    if (lastDayCheckBox.isSelected()) {
        condition.append(" AND data_zwolnienia > ? ");
        paramtersNum++;
    }
    if (functionCheckBox.isSelected()) {
        condition.append(" AND opis_uprawnienia=? ");
        paramtersNum++;
    }
    int param = paramtersNum;
    paramtersNum = 1;
    PreparedStatement pstmt = null;
    sql.append(condition);

    try {
        pstmt = conn.prepareStatement(sql.toString());

//wstawienie paramterów zapytania
        if (nameCheckBox.isSelected() && (param > 0)) {
            pstmt.setString(paramtersNum++, nameTextField.getText() + "%");
            param--;
        }
        if (surnameCheckBox.isSelected() && (param > 0)) {
            pstmt.setString(paramtersNum++, surnameTextField.getText() + "%");
            param--;
        }
        if (cityCheckBox.isSelected() && (param > 0)) {
            pstmt.setString(paramtersNum++, cityTextField.getText() + "%");
            param--;
        }
        if (addrCheckBox.isSelected() && (param > 0)) {
            pstmt.setString(paramtersNum++, addrTextField.getText() + "%");
            param--;
        }
        if (emailCheckBox.isSelected() && (param > 0)) {
            pstmt.setString(paramtersNum++, emailTextField.getText());
            param--;
        }
        if (phoneCheckBox.isSelected() && (param > 0)) {
            pstmt.setInt(paramtersNum++, Integer.parseInt(phoneTextField.getText()));
            param--;
        }
        if (firstDayCheckBox.isSelected() && (param > 0)) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date d = null;
            java.sql.Date d1 = null;

            try {
                d = sdf.parse(firstDayTextField.getText());
                d1 = new java.sql.Date(d.getTime());
            } catch (ParseException ex) {
                Logger.getLogger(searchWorker.class.getName()).log(Level.SEVERE, null, ex);
            }
            pstmt.setDate(paramtersNum++, d1);
            param--;
        }
        if (lastDayCheckBox.isSelected() && (param > 0)) {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date d = null;
            java.sql.Date d1 = null;

            try {
                d = sdf.parse(lastDayTextField.getText());
                d1 = new java.sql.Date(d.getTime());
            } catch (ParseException ex) {
                Logger.getLogger(searchWorker.class.getName()).log(Level.SEVERE, null, ex);
            }
            pstmt.setDate(paramtersNum++, d1);
            param--;
        }
        if (functionCheckBox.isSelected() && (param > 0)) {
            pstmt.setString(paramtersNum++, functionComboBox.getSelectedItem().toString());
            param--;
        }




    } catch (SQLException ex) {
        Logger.getLogger(searchWorker.class.getName()).log(Level.SEVERE, null, ex);
    }




//odebranie wyników zapytania i ich wyświetlenie
    try {
        ResultSet rs = pstmt.executeQuery();
        DefaultTableModel model = (DefaultTableModel) workersTable.getModel();
        model.setRowCount(0);
        Object obj[] = new Object[3];
        while (rs.next()) {
            obj[0] = rs.getInt(3);
            obj[1] = rs.getString(1);
            obj[2] = rs.getString(2);
            model.addRow(obj);
        }


    } catch (SQLException ex) {
        Logger.getLogger(searchWorker.class.getName()).log(Level.SEVERE, null, ex);
    }

//wsyłanie zdarzenia o zaznaczeniu użytkownika, ale to gdzie indziej
}//GEN-LAST:event_searchButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JCheckBox addrCheckBox;
    public javax.swing.JTextField addrTextField;
    public javax.swing.JCheckBox cityCheckBox;
    public javax.swing.JTextField cityTextField;
    public javax.swing.JCheckBox emailCheckBox;
    public javax.swing.JTextField emailTextField;
    public javax.swing.JCheckBox firstDayCheckBox;
    public javax.swing.JTextField firstDayTextField;
    public javax.swing.JCheckBox functionCheckBox;
    public javax.swing.JComboBox functionComboBox;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JCheckBox lastDayCheckBox;
    public javax.swing.JTextField lastDayTextField;
    public javax.swing.JCheckBox nameCheckBox;
    public javax.swing.JTextField nameTextField;
    public javax.swing.JCheckBox phoneCheckBox;
    public javax.swing.JTextField phoneTextField;
    public javax.swing.JButton searchButton;
    public javax.swing.JLabel searchTitle;
    public javax.swing.JCheckBox surnameCheckBox;
    public javax.swing.JTextField surnameTextField;
    public javax.swing.JLabel workerInfoLabel;
    public javax.swing.JTable workersTable;
    // End of variables declaration//GEN-END:variables
}
